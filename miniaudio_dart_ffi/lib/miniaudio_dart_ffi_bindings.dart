// ignore_for_file: camel_case_types
// ignore_for_file: prefer_double_quotes
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: prefer_expression_function_bodies
// ignore_for_file: sort_constructors_first
// ignore_for_file: unused_element

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

@ffi.Native<
    SilenceDataSourceConfig Function(ffi.UnsignedInt, ma_uint32, ma_uint32,
        ma_uint64)>(symbol: 'silence_data_source_config')
external SilenceDataSourceConfig _silence_data_source_config(
  int format,
  int channel_count,
  int sample_rate,
  int len_frames,
);

SilenceDataSourceConfig silence_data_source_config(
  ma_format format,
  Dartma_uint32 channel_count,
  Dartma_uint32 sample_rate,
  Dartma_uint64 len_frames,
) =>
    _silence_data_source_config(
      format.value,
      channel_count,
      sample_rate,
      len_frames,
    );

@ffi.Native<
    ffi.Int Function(
        ffi.Pointer<SilenceDataSource>, ffi.Pointer<SilenceDataSourceConfig>)>()
external int silence_data_source_init(
  ffi.Pointer<SilenceDataSource> self,
  ffi.Pointer<SilenceDataSourceConfig> config,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<SilenceDataSource>)>()
external void silence_data_source_uninit(
  ffi.Pointer<SilenceDataSource> self,
);

@ffi.Native<ffi.Pointer<Sound> Function()>()
external ffi.Pointer<Sound> sound_alloc();

@ffi.Native<
    ffi.Int Function(
        ffi.Pointer<Sound>,
        ffi.Pointer<ffi.Float>,
        ffi.Size,
        ffi.UnsignedInt,
        ffi.Int,
        ffi.Int,
        ffi.Pointer<ma_engine>)>(symbol: 'sound_init')
external int _sound_init(
  ffi.Pointer<Sound> self,
  ffi.Pointer<ffi.Float> data,
  int data_size,
  int format,
  int channels,
  int sample_rate,
  ffi.Pointer<ma_engine> engine,
);

int sound_init(
  ffi.Pointer<Sound> self,
  ffi.Pointer<ffi.Float> data,
  int data_size,
  ma_format format,
  int channels,
  int sample_rate,
  ffi.Pointer<ma_engine> engine,
) =>
    _sound_init(
      self,
      data,
      data_size,
      format.value,
      channels,
      sample_rate,
      engine,
    );

@ffi.Native<ffi.Void Function(ffi.Pointer<Sound>)>()
external void sound_unload(
  ffi.Pointer<Sound> self,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<Sound>)>()
external int sound_play(
  ffi.Pointer<Sound> self,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<Sound>)>()
external int sound_replay(
  ffi.Pointer<Sound> self,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<Sound>)>()
external void sound_pause(
  ffi.Pointer<Sound> self,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<Sound>)>()
external void sound_stop(
  ffi.Pointer<Sound> self,
);

@ffi.Native<ffi.Float Function(ffi.Pointer<Sound>)>()
external double sound_get_volume(
  ffi.Pointer<Sound> self,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<Sound>, ffi.Float)>()
external void sound_set_volume(
  ffi.Pointer<Sound> self,
  double value,
);

@ffi.Native<ffi.Float Function(ffi.Pointer<Sound>)>()
external double sound_get_duration(
  ffi.Pointer<Sound> self,
);

@ffi.Native<ffi.Bool Function(ffi.Pointer<Sound>)>()
external bool sound_get_is_looped(
  ffi.Pointer<Sound> self,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<Sound>, ffi.Bool, ffi.Size)>()
external void sound_set_looped(
  ffi.Pointer<Sound> self,
  bool value,
  int delay_ms,
);

@ffi.Native<ffi.Pointer<Engine> Function()>()
external ffi.Pointer<Engine> engine_alloc();

@ffi.Native<ffi.Int Function(ffi.Pointer<Engine>, ffi.Uint32)>()
external int engine_init(
  ffi.Pointer<Engine> self,
  int period_ms,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<Engine>)>()
external void engine_uninit(
  ffi.Pointer<Engine> self,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<Engine>)>()
external int engine_start(
  ffi.Pointer<Engine> self,
);

@ffi.Native<
    ffi.Int Function(
        ffi.Pointer<Engine>,
        ffi.Pointer<Sound>,
        ffi.Pointer<ffi.Float>,
        ffi.Size,
        ffi.UnsignedInt,
        ffi.Int,
        ffi.Int)>(symbol: 'engine_load_sound')
external int _engine_load_sound(
  ffi.Pointer<Engine> self,
  ffi.Pointer<Sound> sound,
  ffi.Pointer<ffi.Float> data,
  int data_size,
  int format,
  int sample_rate,
  int channels,
);

int engine_load_sound(
  ffi.Pointer<Engine> self,
  ffi.Pointer<Sound> sound,
  ffi.Pointer<ffi.Float> data,
  int data_size,
  ma_format format,
  int sample_rate,
  int channels,
) =>
    _engine_load_sound(
      self,
      sound,
      data,
      data_size,
      format.value,
      sample_rate,
      channels,
    );

@ffi.Native<ffi.Int Function(ffi.Pointer<CircularBuffer>, ffi.Size)>()
external int circular_buffer_init(
  ffi.Pointer<CircularBuffer> cb,
  int size_in_bytes,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<CircularBuffer>)>()
external void circular_buffer_uninit(
  ffi.Pointer<CircularBuffer> cb,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<CircularBuffer>, ffi.Pointer<ffi.Float>, ffi.Size)>()
external void circular_buffer_write(
  ffi.Pointer<CircularBuffer> cb,
  ffi.Pointer<ffi.Float> data,
  int size_in_floats,
);

@ffi.Native<
    ffi.Size Function(
        ffi.Pointer<CircularBuffer>, ffi.Pointer<ffi.Float>, ffi.Size)>()
external int circular_buffer_read(
  ffi.Pointer<CircularBuffer> cb,
  ffi.Pointer<ffi.Float> data,
  int size_in_floats,
);

@ffi.Native<ffi.Size Function(ffi.Pointer<CircularBuffer>)>()
external int circular_buffer_get_available_floats(
  ffi.Pointer<CircularBuffer> cb,
);

@ffi.Native<
    ffi.Size Function(
        ffi.Pointer<CircularBuffer>, ffi.Pointer<ffi.Float>, ffi.Size)>()
external int circular_buffer_read_available(
  ffi.Pointer<CircularBuffer> cb,
  ffi.Pointer<ffi.Float> data,
  int max_size_in_floats,
);

@ffi.Native<ffi.Pointer<Recorder> Function()>()
external ffi.Pointer<Recorder> recorder_create();

@ffi.Native<
    ffi.UnsignedInt Function(ffi.Pointer<Recorder>, ffi.Pointer<ffi.Char>,
        ffi.Int, ffi.Int, ffi.UnsignedInt)>(symbol: 'recorder_init_file')
external int _recorder_init_file(
  ffi.Pointer<Recorder> recorder,
  ffi.Pointer<ffi.Char> filename,
  int sample_rate,
  int channels,
  int format,
);

RecorderResult recorder_init_file(
  ffi.Pointer<Recorder> recorder,
  ffi.Pointer<ffi.Char> filename,
  int sample_rate,
  int channels,
  ma_format format,
) =>
    RecorderResult.fromValue(_recorder_init_file(
      recorder,
      filename,
      sample_rate,
      channels,
      format.value,
    ));

@ffi.Native<
    ffi.UnsignedInt Function(ffi.Pointer<Recorder>, ffi.Int, ffi.Int,
        ffi.UnsignedInt, ffi.Int)>(symbol: 'recorder_init_stream')
external int _recorder_init_stream(
  ffi.Pointer<Recorder> recorder,
  int sample_rate,
  int channels,
  int format,
  int buffer_duration_seconds,
);

RecorderResult recorder_init_stream(
  ffi.Pointer<Recorder> recorder,
  int sample_rate,
  int channels,
  ma_format format,
  int buffer_duration_seconds,
) =>
    RecorderResult.fromValue(_recorder_init_stream(
      recorder,
      sample_rate,
      channels,
      format.value,
      buffer_duration_seconds,
    ));

@ffi.Native<ffi.UnsignedInt Function(ffi.Pointer<Recorder>)>(
    symbol: 'recorder_start')
external int _recorder_start(
  ffi.Pointer<Recorder> recorder,
);

RecorderResult recorder_start(
  ffi.Pointer<Recorder> recorder,
) =>
    RecorderResult.fromValue(_recorder_start(
      recorder,
    ));

@ffi.Native<ffi.UnsignedInt Function(ffi.Pointer<Recorder>)>(
    symbol: 'recorder_stop')
external int _recorder_stop(
  ffi.Pointer<Recorder> recorder,
);

RecorderResult recorder_stop(
  ffi.Pointer<Recorder> recorder,
) =>
    RecorderResult.fromValue(_recorder_stop(
      recorder,
    ));

@ffi.Native<ffi.Int Function(ffi.Pointer<Recorder>)>()
external int recorder_get_available_frames(
  ffi.Pointer<Recorder> recorder,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<Recorder>, ffi.Pointer<ffi.Float>, ffi.Int)>()
external int recorder_get_buffer(
  ffi.Pointer<Recorder> recorder,
  ffi.Pointer<ffi.Float> output,
  int floats_to_read,
);

@ffi.Native<ffi.Bool Function(ffi.Pointer<Recorder>)>()
external bool recorder_is_recording(
  ffi.Pointer<Recorder> recorder,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<Recorder>)>()
external void recorder_destroy(
  ffi.Pointer<Recorder> recorder,
);

@ffi.Native<ffi.Pointer<Generator> Function()>()
external ffi.Pointer<Generator> generator_create();

@ffi.Native<ffi.Void Function(ffi.Pointer<Generator>)>()
external void generator_destroy(
  ffi.Pointer<Generator> generator,
);

@ffi.Native<
    ffi.UnsignedInt Function(ffi.Pointer<Generator>, ffi.UnsignedInt, ffi.Int,
        ffi.Int, ffi.Int)>(symbol: 'generator_init')
external int _generator_init(
  ffi.Pointer<Generator> generator,
  int format,
  int channels,
  int sample_rate,
  int buffer_duration_seconds,
);

GeneratorResult generator_init(
  ffi.Pointer<Generator> generator,
  ma_format format,
  int channels,
  int sample_rate,
  int buffer_duration_seconds,
) =>
    GeneratorResult.fromValue(_generator_init(
      generator,
      format.value,
      channels,
      sample_rate,
      buffer_duration_seconds,
    ));

@ffi.Native<
    ffi.UnsignedInt Function(ffi.Pointer<Generator>, ffi.UnsignedInt,
        ffi.Double, ffi.Double)>(symbol: 'generator_set_waveform')
external int _generator_set_waveform(
  ffi.Pointer<Generator> generator,
  int type,
  double frequency,
  double amplitude,
);

GeneratorResult generator_set_waveform(
  ffi.Pointer<Generator> generator,
  ma_waveform_type type,
  double frequency,
  double amplitude,
) =>
    GeneratorResult.fromValue(_generator_set_waveform(
      generator,
      type.value,
      frequency,
      amplitude,
    ));

@ffi.Native<
    ffi.UnsignedInt Function(ffi.Pointer<Generator>, ffi.Double, ffi.Double,
        ffi.Double)>(symbol: 'generator_set_pulsewave')
external int _generator_set_pulsewave(
  ffi.Pointer<Generator> generator,
  double frequency,
  double amplitude,
  double dutyCycle,
);

GeneratorResult generator_set_pulsewave(
  ffi.Pointer<Generator> generator,
  double frequency,
  double amplitude,
  double dutyCycle,
) =>
    GeneratorResult.fromValue(_generator_set_pulsewave(
      generator,
      frequency,
      amplitude,
      dutyCycle,
    ));

@ffi.Native<
    ffi.UnsignedInt Function(ffi.Pointer<Generator>, ffi.UnsignedInt, ffi.Int,
        ffi.Double)>(symbol: 'generator_set_noise')
external int _generator_set_noise(
  ffi.Pointer<Generator> generator,
  int type,
  int seed,
  double amplitude,
);

GeneratorResult generator_set_noise(
  ffi.Pointer<Generator> generator,
  ma_noise_type type,
  int seed,
  double amplitude,
) =>
    GeneratorResult.fromValue(_generator_set_noise(
      generator,
      type.value,
      seed,
      amplitude,
    ));

@ffi.Native<ffi.UnsignedInt Function(ffi.Pointer<Generator>)>(
    symbol: 'generator_start')
external int _generator_start(
  ffi.Pointer<Generator> generator,
);

GeneratorResult generator_start(
  ffi.Pointer<Generator> generator,
) =>
    GeneratorResult.fromValue(_generator_start(
      generator,
    ));

@ffi.Native<ffi.UnsignedInt Function(ffi.Pointer<Generator>)>(
    symbol: 'generator_stop')
external int _generator_stop(
  ffi.Pointer<Generator> generator,
);

GeneratorResult generator_stop(
  ffi.Pointer<Generator> generator,
) =>
    GeneratorResult.fromValue(_generator_stop(
      generator,
    ));

@ffi.Native<ffi.Float Function(ffi.Pointer<Generator>)>()
external double generator_get_volume(
  ffi.Pointer<Generator> self,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<Generator>, ffi.Float)>()
external void generator_set_volume(
  ffi.Pointer<Generator> self,
  double value,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<Generator>, ffi.Pointer<ffi.Float>, ffi.Int)>()
external int generator_get_buffer(
  ffi.Pointer<Generator> generator,
  ffi.Pointer<ffi.Float> output,
  int floats_to_read,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<Generator>)>()
external int generator_get_available_frames(
  ffi.Pointer<Generator> generator,
);

enum ma_format {
  ma_format_unknown(0),
  ma_format_u8(1),
  ma_format_s16(2),
  ma_format_s24(3),
  ma_format_s32(4),
  ma_format_f32(5),
  ma_format_count(6);

  final int value;
  const ma_format(this.value);

  static ma_format fromValue(int value) => switch (value) {
        0 => ma_format_unknown,
        1 => ma_format_u8,
        2 => ma_format_s16,
        3 => ma_format_s24,
        4 => ma_format_s32,
        5 => ma_format_f32,
        6 => ma_format_count,
        _ => throw ArgumentError('Unknown value for ma_format: $value'),
      };
}

typedef ma_uint32 = ffi.UnsignedInt;
typedef Dartma_uint32 = int;
typedef ma_uint64 = ffi.UnsignedLongLong;
typedef Dartma_uint64 = int;

final class SilenceDataSourceConfig extends ffi.Struct {
  @ffi.UnsignedInt()
  external int formatAsInt;

  ma_format get format => ma_format.fromValue(formatAsInt);

  @ma_uint32()
  external int channel_count;

  @ma_uint32()
  external int sample_rate;

  @ma_uint64()
  external int len_frames;
}

enum ma_result {
  MA_SUCCESS(0),
  MA_ERROR(-1),
  MA_INVALID_ARGS(-2),
  MA_INVALID_OPERATION(-3),
  MA_OUT_OF_MEMORY(-4),
  MA_OUT_OF_RANGE(-5),
  MA_ACCESS_DENIED(-6),
  MA_DOES_NOT_EXIST(-7),
  MA_ALREADY_EXISTS(-8),
  MA_TOO_MANY_OPEN_FILES(-9),
  MA_INVALID_FILE(-10),
  MA_TOO_BIG(-11),
  MA_PATH_TOO_LONG(-12),
  MA_NAME_TOO_LONG(-13),
  MA_NOT_DIRECTORY(-14),
  MA_IS_DIRECTORY(-15),
  MA_DIRECTORY_NOT_EMPTY(-16),
  MA_AT_END(-17),
  MA_NO_SPACE(-18),
  MA_BUSY(-19),
  MA_IO_ERROR(-20),
  MA_INTERRUPT(-21),
  MA_UNAVAILABLE(-22),
  MA_ALREADY_IN_USE(-23),
  MA_BAD_ADDRESS(-24),
  MA_BAD_SEEK(-25),
  MA_BAD_PIPE(-26),
  MA_DEADLOCK(-27),
  MA_TOO_MANY_LINKS(-28),
  MA_NOT_IMPLEMENTED(-29),
  MA_NO_MESSAGE(-30),
  MA_BAD_MESSAGE(-31),
  MA_NO_DATA_AVAILABLE(-32),
  MA_INVALID_DATA(-33),
  MA_TIMEOUT(-34),
  MA_NO_NETWORK(-35),
  MA_NOT_UNIQUE(-36),
  MA_NOT_SOCKET(-37),
  MA_NO_ADDRESS(-38),
  MA_BAD_PROTOCOL(-39),
  MA_PROTOCOL_UNAVAILABLE(-40),
  MA_PROTOCOL_NOT_SUPPORTED(-41),
  MA_PROTOCOL_FAMILY_NOT_SUPPORTED(-42),
  MA_ADDRESS_FAMILY_NOT_SUPPORTED(-43),
  MA_SOCKET_NOT_SUPPORTED(-44),
  MA_CONNECTION_RESET(-45),
  MA_ALREADY_CONNECTED(-46),
  MA_NOT_CONNECTED(-47),
  MA_CONNECTION_REFUSED(-48),
  MA_NO_HOST(-49),
  MA_IN_PROGRESS(-50),
  MA_CANCELLED(-51),
  MA_MEMORY_ALREADY_MAPPED(-52),
  MA_CRC_MISMATCH(-100),
  MA_FORMAT_NOT_SUPPORTED(-200),
  MA_DEVICE_TYPE_NOT_SUPPORTED(-201),
  MA_SHARE_MODE_NOT_SUPPORTED(-202),
  MA_NO_BACKEND(-203),
  MA_NO_DEVICE(-204),
  MA_API_NOT_FOUND(-205),
  MA_INVALID_DEVICE_CONFIG(-206),
  MA_LOOP(-207),
  MA_BACKEND_NOT_ENABLED(-208),
  MA_DEVICE_NOT_INITIALIZED(-300),
  MA_DEVICE_ALREADY_INITIALIZED(-301),
  MA_DEVICE_NOT_STARTED(-302),
  MA_DEVICE_NOT_STOPPED(-303),
  MA_FAILED_TO_INIT_BACKEND(-400),
  MA_FAILED_TO_OPEN_BACKEND_DEVICE(-401),
  MA_FAILED_TO_START_BACKEND_DEVICE(-402),
  MA_FAILED_TO_STOP_BACKEND_DEVICE(-403);

  final int value;
  const ma_result(this.value);

  static ma_result fromValue(int value) => switch (value) {
        0 => MA_SUCCESS,
        -1 => MA_ERROR,
        -2 => MA_INVALID_ARGS,
        -3 => MA_INVALID_OPERATION,
        -4 => MA_OUT_OF_MEMORY,
        -5 => MA_OUT_OF_RANGE,
        -6 => MA_ACCESS_DENIED,
        -7 => MA_DOES_NOT_EXIST,
        -8 => MA_ALREADY_EXISTS,
        -9 => MA_TOO_MANY_OPEN_FILES,
        -10 => MA_INVALID_FILE,
        -11 => MA_TOO_BIG,
        -12 => MA_PATH_TOO_LONG,
        -13 => MA_NAME_TOO_LONG,
        -14 => MA_NOT_DIRECTORY,
        -15 => MA_IS_DIRECTORY,
        -16 => MA_DIRECTORY_NOT_EMPTY,
        -17 => MA_AT_END,
        -18 => MA_NO_SPACE,
        -19 => MA_BUSY,
        -20 => MA_IO_ERROR,
        -21 => MA_INTERRUPT,
        -22 => MA_UNAVAILABLE,
        -23 => MA_ALREADY_IN_USE,
        -24 => MA_BAD_ADDRESS,
        -25 => MA_BAD_SEEK,
        -26 => MA_BAD_PIPE,
        -27 => MA_DEADLOCK,
        -28 => MA_TOO_MANY_LINKS,
        -29 => MA_NOT_IMPLEMENTED,
        -30 => MA_NO_MESSAGE,
        -31 => MA_BAD_MESSAGE,
        -32 => MA_NO_DATA_AVAILABLE,
        -33 => MA_INVALID_DATA,
        -34 => MA_TIMEOUT,
        -35 => MA_NO_NETWORK,
        -36 => MA_NOT_UNIQUE,
        -37 => MA_NOT_SOCKET,
        -38 => MA_NO_ADDRESS,
        -39 => MA_BAD_PROTOCOL,
        -40 => MA_PROTOCOL_UNAVAILABLE,
        -41 => MA_PROTOCOL_NOT_SUPPORTED,
        -42 => MA_PROTOCOL_FAMILY_NOT_SUPPORTED,
        -43 => MA_ADDRESS_FAMILY_NOT_SUPPORTED,
        -44 => MA_SOCKET_NOT_SUPPORTED,
        -45 => MA_CONNECTION_RESET,
        -46 => MA_ALREADY_CONNECTED,
        -47 => MA_NOT_CONNECTED,
        -48 => MA_CONNECTION_REFUSED,
        -49 => MA_NO_HOST,
        -50 => MA_IN_PROGRESS,
        -51 => MA_CANCELLED,
        -52 => MA_MEMORY_ALREADY_MAPPED,
        -100 => MA_CRC_MISMATCH,
        -200 => MA_FORMAT_NOT_SUPPORTED,
        -201 => MA_DEVICE_TYPE_NOT_SUPPORTED,
        -202 => MA_SHARE_MODE_NOT_SUPPORTED,
        -203 => MA_NO_BACKEND,
        -204 => MA_NO_DEVICE,
        -205 => MA_API_NOT_FOUND,
        -206 => MA_INVALID_DEVICE_CONFIG,
        -207 => MA_LOOP,
        -208 => MA_BACKEND_NOT_ENABLED,
        -300 => MA_DEVICE_NOT_INITIALIZED,
        -301 => MA_DEVICE_ALREADY_INITIALIZED,
        -302 => MA_DEVICE_NOT_STARTED,
        -303 => MA_DEVICE_NOT_STOPPED,
        -400 => MA_FAILED_TO_INIT_BACKEND,
        -401 => MA_FAILED_TO_OPEN_BACKEND_DEVICE,
        -402 => MA_FAILED_TO_START_BACKEND_DEVICE,
        -403 => MA_FAILED_TO_STOP_BACKEND_DEVICE,
        _ => throw ArgumentError('Unknown value for ma_result: $value'),
      };
}

/// Data Source
typedef ma_data_source = ffi.Void;
typedef Dartma_data_source = void;
typedef ma_uint8 = ffi.UnsignedChar;
typedef Dartma_uint8 = int;
typedef ma_channel = ma_uint8;
typedef ma_bool32 = ma_uint32;

final class ma_data_source_vtable extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ma_data_source> pDataSource,
              ffi.Pointer<ffi.Void> pFramesOut,
              ma_uint64 frameCount,
              ffi.Pointer<ma_uint64> pFramesRead)>> onRead;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ma_data_source> pDataSource,
              ma_uint64 frameIndex)>> onSeek;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ma_data_source> pDataSource,
              ffi.Pointer<ffi.UnsignedInt> pFormat,
              ffi.Pointer<ma_uint32> pChannels,
              ffi.Pointer<ma_uint32> pSampleRate,
              ffi.Pointer<ma_channel> pChannelMap,
              ffi.Size channelMapCap)>> onGetDataFormat;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ma_data_source> pDataSource,
              ffi.Pointer<ma_uint64> pCursor)>> onGetCursor;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ma_data_source> pDataSource,
              ffi.Pointer<ma_uint64> pLength)>> onGetLength;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ma_data_source> pDataSource,
              ma_bool32 isLooping)>> onSetLooping;

  @ma_uint32()
  external int flags;
}

typedef ma_data_source_get_next_procFunction = ffi.Pointer<ma_data_source>
    Function(ffi.Pointer<ma_data_source> pDataSource);
typedef ma_data_source_get_next_proc
    = ffi.Pointer<ffi.NativeFunction<ma_data_source_get_next_procFunction>>;

final class ma_data_source_base extends ffi.Struct {
  external ffi.Pointer<ma_data_source_vtable> vtable;

  @ma_uint64()
  external int rangeBegInFrames;

  @ma_uint64()
  external int rangeEndInFrames;

  @ma_uint64()
  external int loopBegInFrames;

  @ma_uint64()
  external int loopEndInFrames;

  external ffi.Pointer<ma_data_source> pCurrent;

  external ffi.Pointer<ma_data_source> pNext;

  external ma_data_source_get_next_proc onGetNext;

  @ma_bool32()
  external int isLooping;
}

final class SilenceDataSource extends ffi.Struct {
  external ma_data_source_base ds;

  external SilenceDataSourceConfig config;

  @ma_uint64()
  external int pos_frames;
}

typedef ma_node = ffi.Void;
typedef Dartma_node = void;

final class ma_node_vtable extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_node> pNode,
              ffi.Pointer<ffi.Pointer<ffi.Float>> ppFramesIn,
              ffi.Pointer<ma_uint32> pFrameCountIn,
              ffi.Pointer<ffi.Pointer<ffi.Float>> ppFramesOut,
              ffi.Pointer<ma_uint32> pFrameCountOut)>> onProcess;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ma_node> pNode,
                  ma_uint32 outputFrameCount,
                  ffi.Pointer<ma_uint32> pInputFrameCount)>>
      onGetRequiredInputFrameCount;

  @ma_uint8()
  external int inputBusCount;

  @ma_uint8()
  external int outputBusCount;

  @ma_uint32()
  external int flags;
}

typedef ma_uint16 = ffi.UnsignedShort;
typedef Dartma_uint16 = int;

enum ma_node_state {
  ma_node_state_started(0),
  ma_node_state_stopped(1);

  final int value;
  const ma_node_state(this.value);

  static ma_node_state fromValue(int value) => switch (value) {
        0 => ma_node_state_started,
        1 => ma_node_state_stopped,
        _ => throw ArgumentError('Unknown value for ma_node_state: $value'),
      };
}

typedef ma_spinlock = ma_uint32;

final class ma_node_output_bus extends ffi.Struct {
  external ffi.Pointer<ma_node> pNode;

  @ma_uint8()
  external int outputBusIndex;

  @ma_uint8()
  external int channels;

  @ma_uint8()
  external int inputNodeInputBusIndex;

  @ma_uint32()
  external int flags;

  @ma_uint32()
  external int refCount;

  @ma_bool32()
  external int isAttached;

  @ma_spinlock()
  external int lock;

  @ffi.Float()
  external double volume;

  external ffi.Pointer<ma_node_output_bus> pNext;

  external ffi.Pointer<ma_node_output_bus> pPrev;

  external ffi.Pointer<ma_node> pInputNode;
}

final class ma_node_input_bus extends ffi.Struct {
  external ma_node_output_bus head;

  @ma_uint32()
  external int nextCounter;

  @ma_spinlock()
  external int lock;

  @ma_uint8()
  external int channels;
}

final class ma_node_base extends ffi.Struct {
  external ffi.Pointer<ma_node_graph> pNodeGraph;

  external ffi.Pointer<ma_node_vtable> vtable;

  external ffi.Pointer<ffi.Float> pCachedData;

  @ma_uint16()
  external int cachedDataCapInFramesPerBus;

  @ma_uint16()
  external int cachedFrameCountOut;

  @ma_uint16()
  external int cachedFrameCountIn;

  @ma_uint16()
  external int consumedFrameCountIn;

  @ffi.UnsignedInt()
  external int stateAsInt;

  ma_node_state get state => ma_node_state.fromValue(stateAsInt);

  @ffi.Array.multi([2])
  external ffi.Array<ma_uint64> stateTimes;

  @ma_uint64()
  external int localTime;

  @ma_uint32()
  external int inputBusCount;

  @ma_uint32()
  external int outputBusCount;

  external ffi.Pointer<ma_node_input_bus> pInputBuses;

  external ffi.Pointer<ma_node_output_bus> pOutputBuses;

  @ffi.Array.multi([2])
  external ffi.Array<ma_node_input_bus> _inputBuses;

  @ffi.Array.multi([2])
  external ffi.Array<ma_node_output_bus> _outputBuses;

  external ffi.Pointer<ffi.Void> _pHeap;

  @ma_bool32()
  external int _ownsHeap;
}

final class ma_node_graph extends ffi.Struct {
  external ma_node_base base;

  external ma_node_base endpoint;

  @ma_uint16()
  external int nodeCacheCapInFrames;

  @ma_bool32()
  external int isReading;
}

final class ma_allocation_callbacks extends ffi.Struct {
  external ffi.Pointer<ffi.Void> pUserData;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Size sz, ffi.Pointer<ffi.Void> pUserData)>> onMalloc;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void> p, ffi.Size sz,
              ffi.Pointer<ffi.Void> pUserData)>> onRealloc;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ffi.Void> p, ffi.Pointer<ffi.Void> pUserData)>>
      onFree;
}

typedef ma_log_callback_procFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> pUserData,
    ma_uint32 level,
    ffi.Pointer<ffi.Char> pMessage);
typedef Dartma_log_callback_procFunction = void Function(
    ffi.Pointer<ffi.Void> pUserData,
    Dartma_uint32 level,
    ffi.Pointer<ffi.Char> pMessage);
typedef ma_log_callback_proc
    = ffi.Pointer<ffi.NativeFunction<ma_log_callback_procFunction>>;

final class ma_log_callback extends ffi.Struct {
  external ma_log_callback_proc onLog;

  external ffi.Pointer<ffi.Void> pUserData;
}

typedef ma_handle = ffi.Pointer<ffi.Void>;
typedef ma_mutex = ma_handle;

final class ma_log extends ffi.Struct {
  @ffi.Array.multi([4])
  external ffi.Array<ma_log_callback> callbacks;

  @ma_uint32()
  external int callbackCount;

  external ma_allocation_callbacks allocationCallbacks;

  external ma_mutex lock;
}

/// VFS
/// ===
///
/// The VFS object (virtual file system) is what's used to customize file access. This is useful in cases where stdio FILE* based APIs may not be entirely
/// appropriate for a given situation.
typedef ma_vfs = ffi.Void;
typedef Dartma_vfs = void;
typedef ma_read_procFunction = ffi.Int Function(
    ffi.Pointer<ffi.Void> pUserData,
    ffi.Pointer<ffi.Void> pBufferOut,
    ffi.Size bytesToRead,
    ffi.Pointer<ffi.Size> pBytesRead);
typedef Dartma_read_procFunction = ma_result Function(
    ffi.Pointer<ffi.Void> pUserData,
    ffi.Pointer<ffi.Void> pBufferOut,
    int bytesToRead,
    ffi.Pointer<ffi.Size> pBytesRead);
typedef ma_read_proc = ffi.Pointer<ffi.NativeFunction<ma_read_procFunction>>;
typedef ma_int64 = ffi.LongLong;
typedef Dartma_int64 = int;

enum ma_seek_origin {
  ma_seek_origin_start(0),
  ma_seek_origin_current(1),
  ma_seek_origin_end(2);

  final int value;
  const ma_seek_origin(this.value);

  static ma_seek_origin fromValue(int value) => switch (value) {
        0 => ma_seek_origin_start,
        1 => ma_seek_origin_current,
        2 => ma_seek_origin_end,
        _ => throw ArgumentError('Unknown value for ma_seek_origin: $value'),
      };
}

typedef ma_seek_procFunction = ffi.Int Function(
    ffi.Pointer<ffi.Void> pUserData, ma_int64 offset, ffi.UnsignedInt origin);
typedef Dartma_seek_procFunction = ma_result Function(
    ffi.Pointer<ffi.Void> pUserData,
    Dartma_int64 offset,
    ma_seek_origin origin);
typedef ma_seek_proc = ffi.Pointer<ffi.NativeFunction<ma_seek_procFunction>>;
typedef ma_tell_procFunction = ffi.Int Function(
    ffi.Pointer<ffi.Void> pUserData, ffi.Pointer<ma_int64> pCursor);
typedef Dartma_tell_procFunction = ma_result Function(
    ffi.Pointer<ffi.Void> pUserData, ffi.Pointer<ma_int64> pCursor);
typedef ma_tell_proc = ffi.Pointer<ffi.NativeFunction<ma_tell_procFunction>>;

final class ma_decoding_backend_config extends ffi.Struct {
  @ffi.UnsignedInt()
  external int preferredFormatAsInt;

  ma_format get preferredFormat => ma_format.fromValue(preferredFormatAsInt);

  @ma_uint32()
  external int seekPointCount;
}

final class ma_decoding_backend_vtable extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void> pUserData,
              ma_read_proc onRead,
              ma_seek_proc onSeek,
              ma_tell_proc onTell,
              ffi.Pointer<ffi.Void> pReadSeekTellUserData,
              ffi.Pointer<ma_decoding_backend_config> pConfig,
              ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
              ffi.Pointer<ffi.Pointer<ma_data_source>> ppBackend)>> onInit;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void> pUserData,
              ffi.Pointer<ffi.Char> pFilePath,
              ffi.Pointer<ma_decoding_backend_config> pConfig,
              ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
              ffi.Pointer<ffi.Pointer<ma_data_source>> ppBackend)>> onInitFile;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void> pUserData,
              ffi.Pointer<ffi.WChar> pFilePath,
              ffi.Pointer<ma_decoding_backend_config> pConfig,
              ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
              ffi.Pointer<ffi.Pointer<ma_data_source>> ppBackend)>> onInitFileW;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Void> pUserData,
                  ffi.Pointer<ffi.Void> pData,
                  ffi.Size dataSize,
                  ffi.Pointer<ma_decoding_backend_config> pConfig,
                  ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
                  ffi.Pointer<ffi.Pointer<ma_data_source>> ppBackend)>>
      onInitMemory;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ffi.Void> pUserData,
                  ffi.Pointer<ma_data_source> pBackend,
                  ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks)>>
      onUninit;
}

final class ma_resource_manager_config extends ffi.Struct {
  external ma_allocation_callbacks allocationCallbacks;

  external ffi.Pointer<ma_log> pLog;

  @ffi.UnsignedInt()
  external int decodedFormatAsInt;

  ma_format get decodedFormat => ma_format.fromValue(decodedFormatAsInt);

  @ma_uint32()
  external int decodedChannels;

  @ma_uint32()
  external int decodedSampleRate;

  @ma_uint32()
  external int jobThreadCount;

  @ffi.Size()
  external int jobThreadStackSize;

  @ma_uint32()
  external int jobQueueCapacity;

  @ma_uint32()
  external int flags;

  external ffi.Pointer<ma_vfs> pVFS;

  external ffi.Pointer<ffi.Pointer<ma_decoding_backend_vtable>>
      ppCustomDecodingBackendVTables;

  @ma_uint32()
  external int customDecodingBackendCount;

  external ffi.Pointer<ffi.Void> pCustomDecodingBackendUserData;
}

enum ma_resource_manager_data_supply_type {
  ma_resource_manager_data_supply_type_unknown(0),
  ma_resource_manager_data_supply_type_encoded(1),
  ma_resource_manager_data_supply_type_decoded(2),
  ma_resource_manager_data_supply_type_decoded_paged(3);

  final int value;
  const ma_resource_manager_data_supply_type(this.value);

  static ma_resource_manager_data_supply_type fromValue(int value) =>
      switch (value) {
        0 => ma_resource_manager_data_supply_type_unknown,
        1 => ma_resource_manager_data_supply_type_encoded,
        2 => ma_resource_manager_data_supply_type_decoded,
        3 => ma_resource_manager_data_supply_type_decoded_paged,
        _ => throw ArgumentError(
            'Unknown value for ma_resource_manager_data_supply_type: $value'),
      };
}

final class UnnamedStruct1 extends ffi.Struct {
  external ffi.Pointer<ffi.Void> pData;

  @ffi.Size()
  external int sizeInBytes;
}

final class UnnamedStruct2 extends ffi.Struct {
  external ffi.Pointer<ffi.Void> pData;

  @ma_uint64()
  external int totalFrameCount;

  @ma_uint64()
  external int decodedFrameCount;

  @ffi.UnsignedInt()
  external int formatAsInt;

  ma_format get format => ma_format.fromValue(formatAsInt);

  @ma_uint32()
  external int channels;

  @ma_uint32()
  external int sampleRate;
}

final class ma_paged_audio_buffer_page extends ffi.Struct {
  external ffi.Pointer<ma_paged_audio_buffer_page> pNext;

  @ma_uint64()
  external int sizeInFrames;

  @ffi.Array.multi([1])
  external ffi.Array<ma_uint8> pAudioData;
}

final class ma_paged_audio_buffer_data extends ffi.Struct {
  @ffi.UnsignedInt()
  external int formatAsInt;

  ma_format get format => ma_format.fromValue(formatAsInt);

  @ma_uint32()
  external int channels;

  external ma_paged_audio_buffer_page head;

  external ffi.Pointer<ma_paged_audio_buffer_page> pTail;
}

final class UnnamedStruct3 extends ffi.Struct {
  external ma_paged_audio_buffer_data data;

  @ma_uint64()
  external int decodedFrameCount;

  @ma_uint32()
  external int sampleRate;
}

final class UnnamedUnion1 extends ffi.Union {
  external UnnamedStruct1 encoded;

  external UnnamedStruct2 decoded;

  external UnnamedStruct3 decodedPaged;
}

final class ma_resource_manager_data_supply extends ffi.Struct {
  @ffi.UnsignedInt()
  external int typeAsInt;

  ma_resource_manager_data_supply_type get type =>
      ma_resource_manager_data_supply_type.fromValue(typeAsInt);

  external UnnamedUnion1 backend;
}

final class ma_resource_manager_data_buffer_node extends ffi.Struct {
  @ma_uint32()
  external int hashedName32;

  @ma_uint32()
  external int refCount;

  @ffi.Int()
  external int resultAsInt;

  ma_result get result => ma_result.fromValue(resultAsInt);

  @ma_uint32()
  external int executionCounter;

  @ma_uint32()
  external int executionPointer;

  @ma_bool32()
  external int isDataOwnedByResourceManager;

  external ma_resource_manager_data_supply data;

  external ffi.Pointer<ma_resource_manager_data_buffer_node> pParent;

  external ffi.Pointer<ma_resource_manager_data_buffer_node> pChildLo;

  external ffi.Pointer<ma_resource_manager_data_buffer_node> pChildHi;
}

typedef ma_thread = ma_handle;
typedef ma_semaphore = ma_handle;

final class ma_slot_allocator_group extends ffi.Struct {
  @ma_uint32()
  external int bitfield;
}

final class ma_slot_allocator extends ffi.Struct {
  external ffi.Pointer<ma_slot_allocator_group> pGroups;

  external ffi.Pointer<ma_uint32> pSlots;

  @ma_uint32()
  external int count;

  @ma_uint32()
  external int capacity;

  @ma_bool32()
  external int _ownsHeap;

  external ffi.Pointer<ffi.Void> _pHeap;
}

final class UnnamedStruct4 extends ffi.Struct {
  @ma_uint16()
  external int code;

  @ma_uint16()
  external int slot;

  @ma_uint32()
  external int refcount;
}

final class UnnamedUnion2 extends ffi.Union {
  external UnnamedStruct4 breakup;

  @ma_uint64()
  external int allocation;
}

typedef ma_job_procFunction = ffi.Int Function(ffi.Pointer<ma_job> pJob);
typedef Dartma_job_procFunction = ma_result Function(ffi.Pointer<ma_job> pJob);
typedef ma_job_proc = ffi.Pointer<ffi.NativeFunction<ma_job_procFunction>>;
typedef ma_uintptr = ma_uint64;

final class UnnamedStruct5 extends ffi.Struct {
  external ma_job_proc proc;

  @ma_uintptr()
  external int data0;

  @ma_uintptr()
  external int data1;
}

typedef ma_async_notification = ffi.Void;
typedef Dartma_async_notification = void;
typedef ma_event = ma_handle;

final class ma_fence extends ffi.Struct {
  external ma_event e;

  @ma_uint32()
  external int counter;
}

final class UnnamedStruct6 extends ffi.Struct {
  external ffi.Pointer<ffi.Void> pResourceManager;

  external ffi.Pointer<ffi.Void> pDataBufferNode;

  external ffi.Pointer<ffi.Char> pFilePath;

  external ffi.Pointer<ffi.WChar> pFilePathW;

  @ma_uint32()
  external int flags;

  external ffi.Pointer<ma_async_notification> pInitNotification;

  external ffi.Pointer<ma_async_notification> pDoneNotification;

  external ffi.Pointer<ma_fence> pInitFence;

  external ffi.Pointer<ma_fence> pDoneFence;
}

final class UnnamedStruct7 extends ffi.Struct {
  external ffi.Pointer<ffi.Void> pResourceManager;

  external ffi.Pointer<ffi.Void> pDataBufferNode;

  external ffi.Pointer<ma_async_notification> pDoneNotification;

  external ffi.Pointer<ma_fence> pDoneFence;
}

final class UnnamedStruct8 extends ffi.Struct {
  external ffi.Pointer<ffi.Void> pResourceManager;

  external ffi.Pointer<ffi.Void> pDataBufferNode;

  external ffi.Pointer<ffi.Void> pDecoder;

  external ffi.Pointer<ma_async_notification> pDoneNotification;

  external ffi.Pointer<ma_fence> pDoneFence;
}

final class UnnamedStruct9 extends ffi.Struct {
  external ffi.Pointer<ffi.Void> pDataBuffer;

  external ffi.Pointer<ma_async_notification> pInitNotification;

  external ffi.Pointer<ma_async_notification> pDoneNotification;

  external ffi.Pointer<ma_fence> pInitFence;

  external ffi.Pointer<ma_fence> pDoneFence;

  @ma_uint64()
  external int rangeBegInPCMFrames;

  @ma_uint64()
  external int rangeEndInPCMFrames;

  @ma_uint64()
  external int loopPointBegInPCMFrames;

  @ma_uint64()
  external int loopPointEndInPCMFrames;

  @ma_uint32()
  external int isLooping;
}

final class UnnamedStruct10 extends ffi.Struct {
  external ffi.Pointer<ffi.Void> pDataBuffer;

  external ffi.Pointer<ma_async_notification> pDoneNotification;

  external ffi.Pointer<ma_fence> pDoneFence;
}

final class UnnamedStruct11 extends ffi.Struct {
  external ffi.Pointer<ffi.Void> pDataStream;

  external ffi.Pointer<ffi.Char> pFilePath;

  external ffi.Pointer<ffi.WChar> pFilePathW;

  @ma_uint64()
  external int initialSeekPoint;

  external ffi.Pointer<ma_async_notification> pInitNotification;

  external ffi.Pointer<ma_fence> pInitFence;
}

final class UnnamedStruct12 extends ffi.Struct {
  external ffi.Pointer<ffi.Void> pDataStream;

  external ffi.Pointer<ma_async_notification> pDoneNotification;

  external ffi.Pointer<ma_fence> pDoneFence;
}

final class UnnamedStruct13 extends ffi.Struct {
  external ffi.Pointer<ffi.Void> pDataStream;

  @ma_uint32()
  external int pageIndex;
}

final class UnnamedStruct14 extends ffi.Struct {
  external ffi.Pointer<ffi.Void> pDataStream;

  @ma_uint64()
  external int frameIndex;
}

final class UnnamedUnion4 extends ffi.Union {
  external UnnamedStruct6 loadDataBufferNode;

  external UnnamedStruct7 freeDataBufferNode;

  external UnnamedStruct8 pageDataBufferNode;

  external UnnamedStruct9 loadDataBuffer;

  external UnnamedStruct10 freeDataBuffer;

  external UnnamedStruct11 loadDataStream;

  external UnnamedStruct12 freeDataStream;

  external UnnamedStruct13 pageDataStream;

  external UnnamedStruct14 seekDataStream;
}

final class UnnamedStruct15 extends ffi.Struct {
  external ffi.Pointer<ffi.Void> pDevice;

  @ma_uint32()
  external int deviceType;
}

final class UnnamedUnion6 extends ffi.Union {
  external UnnamedStruct15 reroute;
}

final class UnnamedUnion5 extends ffi.Union {
  external UnnamedUnion6 aaudio;
}

final class UnnamedUnion3 extends ffi.Union {
  external UnnamedStruct5 custom;

  external UnnamedUnion4 resourceManager;

  external UnnamedUnion5 device;
}

final class ma_job extends ffi.Struct {
  external UnnamedUnion2 toc;

  @ma_uint64()
  external int next;

  @ma_uint32()
  external int order;

  external UnnamedUnion3 data;
}

final class ma_job_queue extends ffi.Struct {
  @ma_uint32()
  external int flags;

  @ma_uint32()
  external int capacity;

  @ma_uint64()
  external int head;

  @ma_uint64()
  external int tail;

  external ma_semaphore sem;

  external ma_slot_allocator allocator;

  external ffi.Pointer<ma_job> pJobs;

  @ma_spinlock()
  external int lock;

  external ffi.Pointer<ffi.Void> _pHeap;

  @ma_bool32()
  external int _ownsHeap;
}

typedef ma_vfs_file = ma_handle;

final class ma_file_info extends ffi.Struct {
  @ma_uint64()
  external int sizeInBytes;
}

final class ma_vfs_callbacks extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ma_vfs> pVFS,
              ffi.Pointer<ffi.Char> pFilePath,
              ma_uint32 openMode,
              ffi.Pointer<ma_vfs_file> pFile)>> onOpen;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ma_vfs> pVFS,
              ffi.Pointer<ffi.WChar> pFilePath,
              ma_uint32 openMode,
              ffi.Pointer<ma_vfs_file> pFile)>> onOpenW;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ma_vfs> pVFS, ma_vfs_file file)>>
      onClose;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ma_vfs> pVFS,
              ma_vfs_file file,
              ffi.Pointer<ffi.Void> pDst,
              ffi.Size sizeInBytes,
              ffi.Pointer<ffi.Size> pBytesRead)>> onRead;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ma_vfs> pVFS,
              ma_vfs_file file,
              ffi.Pointer<ffi.Void> pSrc,
              ffi.Size sizeInBytes,
              ffi.Pointer<ffi.Size> pBytesWritten)>> onWrite;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ma_vfs> pVFS, ma_vfs_file file,
              ma_int64 offset, ffi.UnsignedInt origin)>> onSeek;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ma_vfs> pVFS, ma_vfs_file file,
              ffi.Pointer<ma_int64> pCursor)>> onTell;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ma_vfs> pVFS, ma_vfs_file file,
              ffi.Pointer<ma_file_info> pInfo)>> onInfo;
}

final class ma_default_vfs extends ffi.Struct {
  external ma_vfs_callbacks cb;

  external ma_allocation_callbacks allocationCallbacks;
}

final class ma_resource_manager extends ffi.Struct {
  external ma_resource_manager_config config;

  external ffi.Pointer<ma_resource_manager_data_buffer_node>
      pRootDataBufferNode;

  external ma_mutex dataBufferBSTLock;

  @ffi.Array.multi([64])
  external ffi.Array<ma_thread> jobThreads;

  external ma_job_queue jobQueue;

  external ma_default_vfs defaultVFS;

  external ma_log log;
}

enum ma_thread_priority {
  ma_thread_priority_idle(-5),
  ma_thread_priority_lowest(-4),
  ma_thread_priority_low(-3),
  ma_thread_priority_normal(-2),
  ma_thread_priority_high(-1),
  ma_thread_priority_highest(0),
  ma_thread_priority_realtime(1);

  static const ma_thread_priority_default = ma_thread_priority_highest;

  final int value;
  const ma_thread_priority(this.value);

  static ma_thread_priority fromValue(int value) => switch (value) {
        -5 => ma_thread_priority_idle,
        -4 => ma_thread_priority_lowest,
        -3 => ma_thread_priority_low,
        -2 => ma_thread_priority_normal,
        -1 => ma_thread_priority_high,
        0 => ma_thread_priority_highest,
        1 => ma_thread_priority_realtime,
        _ =>
          throw ArgumentError('Unknown value for ma_thread_priority: $value'),
      };

  @override
  String toString() {
    if (this == ma_thread_priority_highest)
      return "ma_thread_priority.ma_thread_priority_highest, ma_thread_priority.ma_thread_priority_default";
    return super.toString();
  }
}

final class UnnamedStruct16 extends ffi.Struct {
  @ma_bool32()
  external int useVerboseDeviceEnumeration;
}

final class UnnamedStruct17 extends ffi.Struct {
  external ffi.Pointer<ffi.Char> pApplicationName;

  external ffi.Pointer<ffi.Char> pServerName;

  @ma_bool32()
  external int tryAutoSpawn;
}

enum ma_ios_session_category {
  ma_ios_session_category_default(0),
  ma_ios_session_category_none(1),
  ma_ios_session_category_ambient(2),
  ma_ios_session_category_solo_ambient(3),
  ma_ios_session_category_playback(4),
  ma_ios_session_category_record(5),
  ma_ios_session_category_play_and_record(6),
  ma_ios_session_category_multi_route(7);

  final int value;
  const ma_ios_session_category(this.value);

  static ma_ios_session_category fromValue(int value) => switch (value) {
        0 => ma_ios_session_category_default,
        1 => ma_ios_session_category_none,
        2 => ma_ios_session_category_ambient,
        3 => ma_ios_session_category_solo_ambient,
        4 => ma_ios_session_category_playback,
        5 => ma_ios_session_category_record,
        6 => ma_ios_session_category_play_and_record,
        7 => ma_ios_session_category_multi_route,
        _ => throw ArgumentError(
            'Unknown value for ma_ios_session_category: $value'),
      };
}

final class UnnamedStruct18 extends ffi.Struct {
  @ffi.UnsignedInt()
  external int sessionCategoryAsInt;

  ma_ios_session_category get sessionCategory =>
      ma_ios_session_category.fromValue(sessionCategoryAsInt);

  @ma_uint32()
  external int sessionCategoryOptions;

  @ma_bool32()
  external int noAudioSessionActivate;

  @ma_bool32()
  external int noAudioSessionDeactivate;
}

final class UnnamedStruct19 extends ffi.Struct {
  external ffi.Pointer<ffi.Char> pClientName;

  @ma_bool32()
  external int tryStartServer;
}

final class ma_context_config extends ffi.Struct {
  external ffi.Pointer<ma_log> pLog;

  @ffi.Int()
  external int threadPriorityAsInt;

  ma_thread_priority get threadPriority =>
      ma_thread_priority.fromValue(threadPriorityAsInt);

  @ffi.Size()
  external int threadStackSize;

  external ffi.Pointer<ffi.Void> pUserData;

  external ma_allocation_callbacks allocationCallbacks;

  external UnnamedStruct16 alsa;

  external UnnamedStruct17 pulse;

  external UnnamedStruct18 coreaudio;

  external UnnamedStruct19 jack;

  external ma_backend_callbacks custom;
}

enum ma_device_type {
  ma_device_type_playback(1),
  ma_device_type_capture(2),
  ma_device_type_duplex(3),
  ma_device_type_loopback(4);

  final int value;
  const ma_device_type(this.value);

  static ma_device_type fromValue(int value) => switch (value) {
        1 => ma_device_type_playback,
        2 => ma_device_type_capture,
        3 => ma_device_type_duplex,
        4 => ma_device_type_loopback,
        _ => throw ArgumentError('Unknown value for ma_device_type: $value'),
      };
}

typedef ma_wchar_win32 = ffi.WChar;
typedef Dartma_wchar_win32 = int;
typedef ma_int32 = ffi.Int;
typedef Dartma_int32 = int;

final class UnnamedUnion7 extends ffi.Union {
  @ffi.Int()
  external int i;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Char> s;

  external ffi.Pointer<ffi.Void> p;
}

final class ma_device_id extends ffi.Union {
  @ffi.Array.multi([64])
  external ffi.Array<ma_wchar_win32> wasapi;

  @ffi.Array.multi([16])
  external ffi.Array<ma_uint8> dsound;

  @ma_uint32()
  external int winmm;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Char> alsa;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Char> pulse;

  @ffi.Int()
  external int jack;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Char> coreaudio;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Char> sndio;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Char> audio4;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Char> oss;

  @ma_int32()
  external int aaudio;

  @ma_uint32()
  external int opensl;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Char> webaudio;

  external UnnamedUnion7 custom;

  @ffi.Int()
  external int nullbackend;
}

final class UnnamedStruct20 extends ffi.Struct {
  @ffi.UnsignedInt()
  external int formatAsInt;

  ma_format get format => ma_format.fromValue(formatAsInt);

  @ma_uint32()
  external int channels;

  @ma_uint32()
  external int sampleRate;

  @ma_uint32()
  external int flags;
}

final class ma_device_info extends ffi.Struct {
  external ma_device_id id;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Char> name;

  @ma_bool32()
  external int isDefault;

  @ma_uint32()
  external int nativeDataFormatCount;

  @ffi.Array.multi([64])
  external ffi.Array<UnnamedStruct20> nativeDataFormats;
}

typedef ma_enum_devices_callback_procFunction = ma_bool32 Function(
    ffi.Pointer<ma_context> pContext,
    ffi.UnsignedInt deviceType,
    ffi.Pointer<ma_device_info> pInfo,
    ffi.Pointer<ffi.Void> pUserData);
typedef Dartma_enum_devices_callback_procFunction = Dartma_uint32 Function(
    ffi.Pointer<ma_context> pContext,
    ma_device_type deviceType,
    ffi.Pointer<ma_device_info> pInfo,
    ffi.Pointer<ffi.Void> pUserData);
typedef ma_enum_devices_callback_proc
    = ffi.Pointer<ffi.NativeFunction<ma_enum_devices_callback_procFunction>>;

enum ma_performance_profile {
  ma_performance_profile_low_latency(0),
  ma_performance_profile_conservative(1);

  final int value;
  const ma_performance_profile(this.value);

  static ma_performance_profile fromValue(int value) => switch (value) {
        0 => ma_performance_profile_low_latency,
        1 => ma_performance_profile_conservative,
        _ => throw ArgumentError(
            'Unknown value for ma_performance_profile: $value'),
      };
}

typedef ma_bool8 = ma_uint8;
typedef ma_device_data_procFunction = ffi.Void Function(
    ffi.Pointer<ma_device> pDevice,
    ffi.Pointer<ffi.Void> pOutput,
    ffi.Pointer<ffi.Void> pInput,
    ma_uint32 frameCount);
typedef Dartma_device_data_procFunction = void Function(
    ffi.Pointer<ma_device> pDevice,
    ffi.Pointer<ffi.Void> pOutput,
    ffi.Pointer<ffi.Void> pInput,
    Dartma_uint32 frameCount);
typedef ma_device_data_proc
    = ffi.Pointer<ffi.NativeFunction<ma_device_data_procFunction>>;

enum ma_device_notification_type {
  ma_device_notification_type_started(0),
  ma_device_notification_type_stopped(1),
  ma_device_notification_type_rerouted(2),
  ma_device_notification_type_interruption_began(3),
  ma_device_notification_type_interruption_ended(4),
  ma_device_notification_type_unlocked(5);

  final int value;
  const ma_device_notification_type(this.value);

  static ma_device_notification_type fromValue(int value) => switch (value) {
        0 => ma_device_notification_type_started,
        1 => ma_device_notification_type_stopped,
        2 => ma_device_notification_type_rerouted,
        3 => ma_device_notification_type_interruption_began,
        4 => ma_device_notification_type_interruption_ended,
        5 => ma_device_notification_type_unlocked,
        _ => throw ArgumentError(
            'Unknown value for ma_device_notification_type: $value'),
      };
}

final class UnnamedStruct21 extends ffi.Struct {
  @ffi.Int()
  external int _unused;
}

final class UnnamedStruct22 extends ffi.Struct {
  @ffi.Int()
  external int _unused;
}

final class UnnamedStruct23 extends ffi.Struct {
  @ffi.Int()
  external int _unused;
}

final class UnnamedStruct24 extends ffi.Struct {
  @ffi.Int()
  external int _unused;
}

final class UnnamedUnion8 extends ffi.Union {
  external UnnamedStruct21 started;

  external UnnamedStruct22 stopped;

  external UnnamedStruct23 rerouted;

  external UnnamedStruct24 interruption;
}

final class ma_device_notification extends ffi.Struct {
  external ffi.Pointer<ma_device> pDevice;

  @ffi.UnsignedInt()
  external int typeAsInt;

  ma_device_notification_type get type =>
      ma_device_notification_type.fromValue(typeAsInt);

  external UnnamedUnion8 data;
}

typedef ma_device_notification_procFunction = ffi.Void Function(
    ffi.Pointer<ma_device_notification> pNotification);
typedef Dartma_device_notification_procFunction = void Function(
    ffi.Pointer<ma_device_notification> pNotification);
typedef ma_device_notification_proc
    = ffi.Pointer<ffi.NativeFunction<ma_device_notification_procFunction>>;
typedef ma_stop_procFunction = ffi.Void Function(
    ffi.Pointer<ma_device> pDevice);
typedef Dartma_stop_procFunction = void Function(
    ffi.Pointer<ma_device> pDevice);
typedef ma_stop_proc = ffi.Pointer<ffi.NativeFunction<ma_stop_procFunction>>;

enum ma_resample_algorithm {
  ma_resample_algorithm_linear(0),
  ma_resample_algorithm_custom(1);

  final int value;
  const ma_resample_algorithm(this.value);

  static ma_resample_algorithm fromValue(int value) => switch (value) {
        0 => ma_resample_algorithm_linear,
        1 => ma_resample_algorithm_custom,
        _ => throw ArgumentError(
            'Unknown value for ma_resample_algorithm: $value'),
      };
}

typedef ma_resampling_backend = ffi.Void;
typedef Dartma_resampling_backend = void;

final class ma_resampling_backend_vtable extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void> pUserData,
              ffi.Pointer<ma_resampler_config> pConfig,
              ffi.Pointer<ffi.Size> pHeapSizeInBytes)>> onGetHeapSize;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Void> pUserData,
                  ffi.Pointer<ma_resampler_config> pConfig,
                  ffi.Pointer<ffi.Void> pHeap,
                  ffi.Pointer<ffi.Pointer<ma_resampling_backend>> ppBackend)>>
      onInit;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ffi.Void> pUserData,
                  ffi.Pointer<ma_resampling_backend> pBackend,
                  ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks)>>
      onUninit;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void> pUserData,
              ffi.Pointer<ma_resampling_backend> pBackend,
              ffi.Pointer<ffi.Void> pFramesIn,
              ffi.Pointer<ma_uint64> pFrameCountIn,
              ffi.Pointer<ffi.Void> pFramesOut,
              ffi.Pointer<ma_uint64> pFrameCountOut)>> onProcess;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void> pUserData,
              ffi.Pointer<ma_resampling_backend> pBackend,
              ma_uint32 sampleRateIn,
              ma_uint32 sampleRateOut)>> onSetRate;

  external ffi.Pointer<
      ffi.NativeFunction<
          ma_uint64 Function(ffi.Pointer<ffi.Void> pUserData,
              ffi.Pointer<ma_resampling_backend> pBackend)>> onGetInputLatency;

  external ffi.Pointer<
      ffi.NativeFunction<
          ma_uint64 Function(ffi.Pointer<ffi.Void> pUserData,
              ffi.Pointer<ma_resampling_backend> pBackend)>> onGetOutputLatency;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Void> pUserData,
                  ffi.Pointer<ma_resampling_backend> pBackend,
                  ma_uint64 outputFrameCount,
                  ffi.Pointer<ma_uint64> pInputFrameCount)>>
      onGetRequiredInputFrameCount;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Void> pUserData,
                  ffi.Pointer<ma_resampling_backend> pBackend,
                  ma_uint64 inputFrameCount,
                  ffi.Pointer<ma_uint64> pOutputFrameCount)>>
      onGetExpectedOutputFrameCount;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void> pUserData,
              ffi.Pointer<ma_resampling_backend> pBackend)>> onReset;
}

final class UnnamedStruct25 extends ffi.Struct {
  @ma_uint32()
  external int lpfOrder;
}

final class ma_resampler_config extends ffi.Struct {
  @ffi.UnsignedInt()
  external int formatAsInt;

  ma_format get format => ma_format.fromValue(formatAsInt);

  @ma_uint32()
  external int channels;

  @ma_uint32()
  external int sampleRateIn;

  @ma_uint32()
  external int sampleRateOut;

  @ffi.UnsignedInt()
  external int algorithmAsInt;

  ma_resample_algorithm get algorithm =>
      ma_resample_algorithm.fromValue(algorithmAsInt);

  external ffi.Pointer<ma_resampling_backend_vtable> pBackendVTable;

  external ffi.Pointer<ffi.Void> pBackendUserData;

  external UnnamedStruct25 linear;
}

enum ma_channel_mix_mode {
  ma_channel_mix_mode_rectangular(0),
  ma_channel_mix_mode_simple(1),
  ma_channel_mix_mode_custom_weights(2);

  static const ma_channel_mix_mode_default = ma_channel_mix_mode_rectangular;

  final int value;
  const ma_channel_mix_mode(this.value);

  static ma_channel_mix_mode fromValue(int value) => switch (value) {
        0 => ma_channel_mix_mode_rectangular,
        1 => ma_channel_mix_mode_simple,
        2 => ma_channel_mix_mode_custom_weights,
        _ =>
          throw ArgumentError('Unknown value for ma_channel_mix_mode: $value'),
      };

  @override
  String toString() {
    if (this == ma_channel_mix_mode_rectangular)
      return "ma_channel_mix_mode.ma_channel_mix_mode_rectangular, ma_channel_mix_mode.ma_channel_mix_mode_default";
    return super.toString();
  }
}

enum ma_share_mode {
  ma_share_mode_shared(0),
  ma_share_mode_exclusive(1);

  final int value;
  const ma_share_mode(this.value);

  static ma_share_mode fromValue(int value) => switch (value) {
        0 => ma_share_mode_shared,
        1 => ma_share_mode_exclusive,
        _ => throw ArgumentError('Unknown value for ma_share_mode: $value'),
      };
}

final class UnnamedStruct26 extends ffi.Struct {
  external ffi.Pointer<ma_device_id> pDeviceID;

  @ffi.UnsignedInt()
  external int formatAsInt;

  ma_format get format => ma_format.fromValue(formatAsInt);

  @ma_uint32()
  external int channels;

  external ffi.Pointer<ma_channel> pChannelMap;

  @ffi.UnsignedInt()
  external int channelMixModeAsInt;

  ma_channel_mix_mode get channelMixMode =>
      ma_channel_mix_mode.fromValue(channelMixModeAsInt);

  @ma_bool32()
  external int calculateLFEFromSpatialChannels;

  @ffi.UnsignedInt()
  external int shareModeAsInt;

  ma_share_mode get shareMode => ma_share_mode.fromValue(shareModeAsInt);
}

final class UnnamedStruct27 extends ffi.Struct {
  external ffi.Pointer<ma_device_id> pDeviceID;

  @ffi.UnsignedInt()
  external int formatAsInt;

  ma_format get format => ma_format.fromValue(formatAsInt);

  @ma_uint32()
  external int channels;

  external ffi.Pointer<ma_channel> pChannelMap;

  @ffi.UnsignedInt()
  external int channelMixModeAsInt;

  ma_channel_mix_mode get channelMixMode =>
      ma_channel_mix_mode.fromValue(channelMixModeAsInt);

  @ma_bool32()
  external int calculateLFEFromSpatialChannels;

  @ffi.UnsignedInt()
  external int shareModeAsInt;

  ma_share_mode get shareMode => ma_share_mode.fromValue(shareModeAsInt);
}

enum ma_wasapi_usage {
  ma_wasapi_usage_default(0),
  ma_wasapi_usage_games(1),
  ma_wasapi_usage_pro_audio(2);

  final int value;
  const ma_wasapi_usage(this.value);

  static ma_wasapi_usage fromValue(int value) => switch (value) {
        0 => ma_wasapi_usage_default,
        1 => ma_wasapi_usage_games,
        2 => ma_wasapi_usage_pro_audio,
        _ => throw ArgumentError('Unknown value for ma_wasapi_usage: $value'),
      };
}

final class UnnamedStruct28 extends ffi.Struct {
  @ffi.UnsignedInt()
  external int usageAsInt;

  ma_wasapi_usage get usage => ma_wasapi_usage.fromValue(usageAsInt);

  @ma_bool8()
  external int noAutoConvertSRC;

  @ma_bool8()
  external int noDefaultQualitySRC;

  @ma_bool8()
  external int noAutoStreamRouting;

  @ma_bool8()
  external int noHardwareOffloading;

  @ma_uint32()
  external int loopbackProcessID;

  @ma_bool8()
  external int loopbackProcessExclude;
}

final class UnnamedStruct29 extends ffi.Struct {
  @ma_bool32()
  external int noMMap;

  @ma_bool32()
  external int noAutoFormat;

  @ma_bool32()
  external int noAutoChannels;

  @ma_bool32()
  external int noAutoResample;
}

final class UnnamedStruct30 extends ffi.Struct {
  external ffi.Pointer<ffi.Char> pStreamNamePlayback;

  external ffi.Pointer<ffi.Char> pStreamNameCapture;
}

final class UnnamedStruct31 extends ffi.Struct {
  @ma_bool32()
  external int allowNominalSampleRateChange;
}

enum ma_opensl_stream_type {
  ma_opensl_stream_type_default(0),
  ma_opensl_stream_type_voice(1),
  ma_opensl_stream_type_system(2),
  ma_opensl_stream_type_ring(3),
  ma_opensl_stream_type_media(4),
  ma_opensl_stream_type_alarm(5),
  ma_opensl_stream_type_notification(6);

  final int value;
  const ma_opensl_stream_type(this.value);

  static ma_opensl_stream_type fromValue(int value) => switch (value) {
        0 => ma_opensl_stream_type_default,
        1 => ma_opensl_stream_type_voice,
        2 => ma_opensl_stream_type_system,
        3 => ma_opensl_stream_type_ring,
        4 => ma_opensl_stream_type_media,
        5 => ma_opensl_stream_type_alarm,
        6 => ma_opensl_stream_type_notification,
        _ => throw ArgumentError(
            'Unknown value for ma_opensl_stream_type: $value'),
      };
}

enum ma_opensl_recording_preset {
  ma_opensl_recording_preset_default(0),
  ma_opensl_recording_preset_generic(1),
  ma_opensl_recording_preset_camcorder(2),
  ma_opensl_recording_preset_voice_recognition(3),
  ma_opensl_recording_preset_voice_communication(4),
  ma_opensl_recording_preset_voice_unprocessed(5);

  final int value;
  const ma_opensl_recording_preset(this.value);

  static ma_opensl_recording_preset fromValue(int value) => switch (value) {
        0 => ma_opensl_recording_preset_default,
        1 => ma_opensl_recording_preset_generic,
        2 => ma_opensl_recording_preset_camcorder,
        3 => ma_opensl_recording_preset_voice_recognition,
        4 => ma_opensl_recording_preset_voice_communication,
        5 => ma_opensl_recording_preset_voice_unprocessed,
        _ => throw ArgumentError(
            'Unknown value for ma_opensl_recording_preset: $value'),
      };
}

final class UnnamedStruct32 extends ffi.Struct {
  @ffi.UnsignedInt()
  external int streamTypeAsInt;

  ma_opensl_stream_type get streamType =>
      ma_opensl_stream_type.fromValue(streamTypeAsInt);

  @ffi.UnsignedInt()
  external int recordingPresetAsInt;

  ma_opensl_recording_preset get recordingPreset =>
      ma_opensl_recording_preset.fromValue(recordingPresetAsInt);

  @ma_bool32()
  external int enableCompatibilityWorkarounds;
}

enum ma_aaudio_usage {
  ma_aaudio_usage_default(0),
  ma_aaudio_usage_media(1),
  ma_aaudio_usage_voice_communication(2),
  ma_aaudio_usage_voice_communication_signalling(3),
  ma_aaudio_usage_alarm(4),
  ma_aaudio_usage_notification(5),
  ma_aaudio_usage_notification_ringtone(6),
  ma_aaudio_usage_notification_event(7),
  ma_aaudio_usage_assistance_accessibility(8),
  ma_aaudio_usage_assistance_navigation_guidance(9),
  ma_aaudio_usage_assistance_sonification(10),
  ma_aaudio_usage_game(11),
  ma_aaudio_usage_assitant(12),
  ma_aaudio_usage_emergency(13),
  ma_aaudio_usage_safety(14),
  ma_aaudio_usage_vehicle_status(15),
  ma_aaudio_usage_announcement(16);

  final int value;
  const ma_aaudio_usage(this.value);

  static ma_aaudio_usage fromValue(int value) => switch (value) {
        0 => ma_aaudio_usage_default,
        1 => ma_aaudio_usage_media,
        2 => ma_aaudio_usage_voice_communication,
        3 => ma_aaudio_usage_voice_communication_signalling,
        4 => ma_aaudio_usage_alarm,
        5 => ma_aaudio_usage_notification,
        6 => ma_aaudio_usage_notification_ringtone,
        7 => ma_aaudio_usage_notification_event,
        8 => ma_aaudio_usage_assistance_accessibility,
        9 => ma_aaudio_usage_assistance_navigation_guidance,
        10 => ma_aaudio_usage_assistance_sonification,
        11 => ma_aaudio_usage_game,
        12 => ma_aaudio_usage_assitant,
        13 => ma_aaudio_usage_emergency,
        14 => ma_aaudio_usage_safety,
        15 => ma_aaudio_usage_vehicle_status,
        16 => ma_aaudio_usage_announcement,
        _ => throw ArgumentError('Unknown value for ma_aaudio_usage: $value'),
      };
}

enum ma_aaudio_content_type {
  ma_aaudio_content_type_default(0),
  ma_aaudio_content_type_speech(1),
  ma_aaudio_content_type_music(2),
  ma_aaudio_content_type_movie(3),
  ma_aaudio_content_type_sonification(4);

  final int value;
  const ma_aaudio_content_type(this.value);

  static ma_aaudio_content_type fromValue(int value) => switch (value) {
        0 => ma_aaudio_content_type_default,
        1 => ma_aaudio_content_type_speech,
        2 => ma_aaudio_content_type_music,
        3 => ma_aaudio_content_type_movie,
        4 => ma_aaudio_content_type_sonification,
        _ => throw ArgumentError(
            'Unknown value for ma_aaudio_content_type: $value'),
      };
}

enum ma_aaudio_input_preset {
  ma_aaudio_input_preset_default(0),
  ma_aaudio_input_preset_generic(1),
  ma_aaudio_input_preset_camcorder(2),
  ma_aaudio_input_preset_voice_recognition(3),
  ma_aaudio_input_preset_voice_communication(4),
  ma_aaudio_input_preset_unprocessed(5),
  ma_aaudio_input_preset_voice_performance(6);

  final int value;
  const ma_aaudio_input_preset(this.value);

  static ma_aaudio_input_preset fromValue(int value) => switch (value) {
        0 => ma_aaudio_input_preset_default,
        1 => ma_aaudio_input_preset_generic,
        2 => ma_aaudio_input_preset_camcorder,
        3 => ma_aaudio_input_preset_voice_recognition,
        4 => ma_aaudio_input_preset_voice_communication,
        5 => ma_aaudio_input_preset_unprocessed,
        6 => ma_aaudio_input_preset_voice_performance,
        _ => throw ArgumentError(
            'Unknown value for ma_aaudio_input_preset: $value'),
      };
}

enum ma_aaudio_allowed_capture_policy {
  ma_aaudio_allow_capture_default(0),
  ma_aaudio_allow_capture_by_all(1),
  ma_aaudio_allow_capture_by_system(2),
  ma_aaudio_allow_capture_by_none(3);

  final int value;
  const ma_aaudio_allowed_capture_policy(this.value);

  static ma_aaudio_allowed_capture_policy fromValue(int value) =>
      switch (value) {
        0 => ma_aaudio_allow_capture_default,
        1 => ma_aaudio_allow_capture_by_all,
        2 => ma_aaudio_allow_capture_by_system,
        3 => ma_aaudio_allow_capture_by_none,
        _ => throw ArgumentError(
            'Unknown value for ma_aaudio_allowed_capture_policy: $value'),
      };
}

final class UnnamedStruct33 extends ffi.Struct {
  @ffi.UnsignedInt()
  external int usageAsInt;

  ma_aaudio_usage get usage => ma_aaudio_usage.fromValue(usageAsInt);

  @ffi.UnsignedInt()
  external int contentTypeAsInt;

  ma_aaudio_content_type get contentType =>
      ma_aaudio_content_type.fromValue(contentTypeAsInt);

  @ffi.UnsignedInt()
  external int inputPresetAsInt;

  ma_aaudio_input_preset get inputPreset =>
      ma_aaudio_input_preset.fromValue(inputPresetAsInt);

  @ffi.UnsignedInt()
  external int allowedCapturePolicyAsInt;

  ma_aaudio_allowed_capture_policy get allowedCapturePolicy =>
      ma_aaudio_allowed_capture_policy.fromValue(allowedCapturePolicyAsInt);

  @ma_bool32()
  external int noAutoStartAfterReroute;

  @ma_bool32()
  external int enableCompatibilityWorkarounds;
}

final class ma_device_config extends ffi.Struct {
  @ffi.UnsignedInt()
  external int deviceTypeAsInt;

  ma_device_type get deviceType => ma_device_type.fromValue(deviceTypeAsInt);

  @ma_uint32()
  external int sampleRate;

  @ma_uint32()
  external int periodSizeInFrames;

  @ma_uint32()
  external int periodSizeInMilliseconds;

  @ma_uint32()
  external int periods;

  @ffi.UnsignedInt()
  external int performanceProfileAsInt;

  ma_performance_profile get performanceProfile =>
      ma_performance_profile.fromValue(performanceProfileAsInt);

  @ma_bool8()
  external int noPreSilencedOutputBuffer;

  @ma_bool8()
  external int noClip;

  @ma_bool8()
  external int noDisableDenormals;

  @ma_bool8()
  external int noFixedSizedCallback;

  external ma_device_data_proc dataCallback;

  external ma_device_notification_proc notificationCallback;

  external ma_stop_proc stopCallback;

  external ffi.Pointer<ffi.Void> pUserData;

  external ma_resampler_config resampling;

  external UnnamedStruct26 playback;

  external UnnamedStruct27 capture;

  external UnnamedStruct28 wasapi;

  external UnnamedStruct29 alsa;

  external UnnamedStruct30 pulse;

  external UnnamedStruct31 coreaudio;

  external UnnamedStruct32 opensl;

  external UnnamedStruct33 aaudio;
}

final class ma_device_descriptor extends ffi.Struct {
  external ffi.Pointer<ma_device_id> pDeviceID;

  @ffi.UnsignedInt()
  external int shareModeAsInt;

  ma_share_mode get shareMode => ma_share_mode.fromValue(shareModeAsInt);

  @ffi.UnsignedInt()
  external int formatAsInt;

  ma_format get format => ma_format.fromValue(formatAsInt);

  @ma_uint32()
  external int channels;

  @ma_uint32()
  external int sampleRate;

  @ffi.Array.multi([254])
  external ffi.Array<ma_channel> channelMap;

  @ma_uint32()
  external int periodSizeInFrames;

  @ma_uint32()
  external int periodSizeInMilliseconds;

  @ma_uint32()
  external int periodCount;
}

final class ma_backend_callbacks extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ma_context> pContext,
              ffi.Pointer<ma_context_config> pConfig,
              ffi.Pointer<ma_backend_callbacks> pCallbacks)>> onContextInit;

  external ffi.Pointer<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<ma_context> pContext)>>
      onContextUninit;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ma_context> pContext,
              ma_enum_devices_callback_proc callback,
              ffi.Pointer<ffi.Void> pUserData)>> onContextEnumerateDevices;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ma_context> pContext,
              ffi.UnsignedInt deviceType,
              ffi.Pointer<ma_device_id> pDeviceID,
              ffi.Pointer<ma_device_info> pDeviceInfo)>> onContextGetDeviceInfo;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ma_device> pDevice,
                  ffi.Pointer<ma_device_config> pConfig,
                  ffi.Pointer<ma_device_descriptor> pDescriptorPlayback,
                  ffi.Pointer<ma_device_descriptor> pDescriptorCapture)>>
      onDeviceInit;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ma_device> pDevice)>>
      onDeviceUninit;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ma_device> pDevice)>>
      onDeviceStart;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ma_device> pDevice)>>
      onDeviceStop;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ma_device> pDevice,
              ffi.Pointer<ffi.Void> pFrames,
              ma_uint32 frameCount,
              ffi.Pointer<ma_uint32> pFramesRead)>> onDeviceRead;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ma_device> pDevice,
              ffi.Pointer<ffi.Void> pFrames,
              ma_uint32 frameCount,
              ffi.Pointer<ma_uint32> pFramesWritten)>> onDeviceWrite;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ma_device> pDevice)>>
      onDeviceDataLoop;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ma_device> pDevice)>>
      onDeviceDataLoopWakeup;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ma_device> pDevice, ffi.UnsignedInt type,
              ffi.Pointer<ma_device_info> pDeviceInfo)>> onDeviceGetInfo;
}

enum ma_backend {
  ma_backend_wasapi(0),
  ma_backend_dsound(1),
  ma_backend_winmm(2),
  ma_backend_coreaudio(3),
  ma_backend_sndio(4),
  ma_backend_audio4(5),
  ma_backend_oss(6),
  ma_backend_pulseaudio(7),
  ma_backend_alsa(8),
  ma_backend_jack(9),
  ma_backend_aaudio(10),
  ma_backend_opensl(11),
  ma_backend_webaudio(12),
  ma_backend_custom(13),
  ma_backend_null(14);

  final int value;
  const ma_backend(this.value);

  static ma_backend fromValue(int value) => switch (value) {
        0 => ma_backend_wasapi,
        1 => ma_backend_dsound,
        2 => ma_backend_winmm,
        3 => ma_backend_coreaudio,
        4 => ma_backend_sndio,
        5 => ma_backend_audio4,
        6 => ma_backend_oss,
        7 => ma_backend_pulseaudio,
        8 => ma_backend_alsa,
        9 => ma_backend_jack,
        10 => ma_backend_aaudio,
        11 => ma_backend_opensl,
        12 => ma_backend_webaudio,
        13 => ma_backend_custom,
        14 => ma_backend_null,
        _ => throw ArgumentError('Unknown value for ma_backend: $value'),
      };
}

final class UnnamedStruct35 extends ffi.Struct {
  @ffi.Int()
  external int _unused;
}

final class UnnamedStruct36 extends ffi.Struct {
  @ffi.UnsignedInt()
  external int deviceTypeAsInt;

  ma_device_type get deviceType => ma_device_type.fromValue(deviceTypeAsInt);

  external ffi.Pointer<ffi.Void> pAudioClient;

  external ffi.Pointer<ffi.Pointer<ffi.Void>> ppAudioClientService;

  external ffi.Pointer<ffi.Int> pResult;
}

final class UnnamedStruct37 extends ffi.Struct {
  external ffi.Pointer<ma_device> pDevice;

  @ffi.UnsignedInt()
  external int deviceTypeAsInt;

  ma_device_type get deviceType => ma_device_type.fromValue(deviceTypeAsInt);
}

final class UnnamedUnion10 extends ffi.Union {
  external UnnamedStruct35 quit;

  external UnnamedStruct36 createAudioClient;

  external UnnamedStruct37 releaseAudioClient;
}

final class ma_context_command__wasapi extends ffi.Struct {
  @ffi.Int()
  external int code;

  external ffi.Pointer<ma_event> pEvent;

  external UnnamedUnion10 data;
}

typedef ma_proc = ffi.Pointer<ffi.Void>;

final class UnnamedStruct34 extends ffi.Struct {
  external ma_thread commandThread;

  external ma_mutex commandLock;

  external ma_semaphore commandSem;

  @ma_uint32()
  external int commandIndex;

  @ma_uint32()
  external int commandCount;

  @ffi.Array.multi([4])
  external ffi.Array<ma_context_command__wasapi> commands;

  external ma_handle hAvrt;

  external ma_proc AvSetMmThreadCharacteristicsA;

  external ma_proc AvRevertMmThreadcharacteristics;

  external ma_handle hMMDevapi;

  external ma_proc ActivateAudioInterfaceAsync;
}

final class UnnamedStruct38 extends ffi.Struct {
  external ma_handle hDSoundDLL;

  external ma_proc DirectSoundCreate;

  external ma_proc DirectSoundEnumerateA;

  external ma_proc DirectSoundCaptureCreate;

  external ma_proc DirectSoundCaptureEnumerateA;
}

final class UnnamedStruct39 extends ffi.Struct {
  external ma_handle hWinMM;

  external ma_proc waveOutGetNumDevs;

  external ma_proc waveOutGetDevCapsA;

  external ma_proc waveOutOpen;

  external ma_proc waveOutClose;

  external ma_proc waveOutPrepareHeader;

  external ma_proc waveOutUnprepareHeader;

  external ma_proc waveOutWrite;

  external ma_proc waveOutReset;

  external ma_proc waveInGetNumDevs;

  external ma_proc waveInGetDevCapsA;

  external ma_proc waveInOpen;

  external ma_proc waveInClose;

  external ma_proc waveInPrepareHeader;

  external ma_proc waveInUnprepareHeader;

  external ma_proc waveInAddBuffer;

  external ma_proc waveInStart;

  external ma_proc waveInReset;
}

final class UnnamedStruct40 extends ffi.Struct {
  external ma_handle jackSO;

  external ma_proc jack_client_open;

  external ma_proc jack_client_close;

  external ma_proc jack_client_name_size;

  external ma_proc jack_set_process_callback;

  external ma_proc jack_set_buffer_size_callback;

  external ma_proc jack_on_shutdown;

  external ma_proc jack_get_sample_rate;

  external ma_proc jack_get_buffer_size;

  external ma_proc jack_get_ports;

  external ma_proc jack_activate;

  external ma_proc jack_deactivate;

  external ma_proc jack_connect;

  external ma_proc jack_port_register;

  external ma_proc jack_port_name;

  external ma_proc jack_port_get_buffer;

  external ma_proc jack_free;

  external ffi.Pointer<ffi.Char> pClientName;

  @ma_bool32()
  external int tryStartServer;
}

final class UnnamedStruct41 extends ffi.Struct {
  @ffi.Int()
  external int _unused;
}

final class UnnamedUnion9 extends ffi.Union {
  external UnnamedStruct34 wasapi;

  external UnnamedStruct38 dsound;

  external UnnamedStruct39 winmm;

  external UnnamedStruct40 jack;

  external UnnamedStruct41 null_backend;
}

final class UnnamedStruct42 extends ffi.Struct {
  external ma_handle hOle32DLL;

  external ma_proc CoInitialize;

  external ma_proc CoInitializeEx;

  external ma_proc CoUninitialize;

  external ma_proc CoCreateInstance;

  external ma_proc CoTaskMemFree;

  external ma_proc PropVariantClear;

  external ma_proc StringFromGUID2;

  external ma_handle hUser32DLL;

  external ma_proc GetForegroundWindow;

  external ma_proc GetDesktopWindow;

  external ma_handle hAdvapi32DLL;

  external ma_proc RegOpenKeyExA;

  external ma_proc RegCloseKey;

  external ma_proc RegQueryValueExA;

  @ffi.Long()
  external int CoInitializeResult;
}

final class UnnamedUnion11 extends ffi.Union {
  external UnnamedStruct42 win32;

  @ffi.Int()
  external int _unused;
}

final class ma_context extends ffi.Struct {
  external ma_backend_callbacks callbacks;

  @ffi.UnsignedInt()
  external int backendAsInt;

  ma_backend get backend => ma_backend.fromValue(backendAsInt);

  external ffi.Pointer<ma_log> pLog;

  external ma_log log;

  @ffi.Int()
  external int threadPriorityAsInt;

  ma_thread_priority get threadPriority =>
      ma_thread_priority.fromValue(threadPriorityAsInt);

  @ffi.Size()
  external int threadStackSize;

  external ffi.Pointer<ffi.Void> pUserData;

  external ma_allocation_callbacks allocationCallbacks;

  external ma_mutex deviceEnumLock;

  external ma_mutex deviceInfoLock;

  @ma_uint32()
  external int deviceInfoCapacity;

  @ma_uint32()
  external int playbackDeviceInfoCount;

  @ma_uint32()
  external int captureDeviceInfoCount;

  external ffi.Pointer<ma_device_info> pDeviceInfos;

  external UnnamedUnion9 unnamed;

  external UnnamedUnion11 unnamed$1;
}

enum ma_device_state {
  ma_device_state_uninitialized(0),
  ma_device_state_stopped(1),
  ma_device_state_started(2),
  ma_device_state_starting(3),
  ma_device_state_stopping(4);

  final int value;
  const ma_device_state(this.value);

  static ma_device_state fromValue(int value) => switch (value) {
        0 => ma_device_state_uninitialized,
        1 => ma_device_state_stopped,
        2 => ma_device_state_started,
        3 => ma_device_state_starting,
        4 => ma_device_state_stopping,
        _ => throw ArgumentError('Unknown value for ma_device_state: $value'),
      };
}

final class ma_atomic_device_state extends ffi.Struct {
  @ffi.UnsignedInt()
  external int valueAsInt;

  ma_device_state get value => ma_device_state.fromValue(valueAsInt);
}

typedef ma_float = ffi.Float;
typedef Dartma_float = double;

final class ma_atomic_float extends ffi.Struct {
  @ma_float()
  external double value;
}

/// Ring Buffer
final class ma_rb extends ffi.Struct {
  external ffi.Pointer<ffi.Void> pBuffer;

  @ma_uint32()
  external int subbufferSizeInBytes;

  @ma_uint32()
  external int subbufferCount;

  @ma_uint32()
  external int subbufferStrideInBytes;

  @ma_uint32()
  external int encodedReadOffset;

  @ma_uint32()
  external int encodedWriteOffset;

  @ma_bool8()
  external int ownsBuffer;

  @ma_bool8()
  external int clearOnWriteAcquire;

  external ma_allocation_callbacks allocationCallbacks;
}

final class ma_pcm_rb extends ffi.Struct {
  external ma_data_source_base ds;

  external ma_rb rb;

  @ffi.UnsignedInt()
  external int formatAsInt;

  ma_format get format => ma_format.fromValue(formatAsInt);

  @ma_uint32()
  external int channels;

  @ma_uint32()
  external int sampleRate;
}

final class ma_duplex_rb extends ffi.Struct {
  external ma_pcm_rb rb;
}

final class UnnamedStruct44 extends ffi.Struct {
  @ma_uint32()
  external int lpfOrder;
}

final class UnnamedStruct43 extends ffi.Struct {
  @ffi.UnsignedInt()
  external int algorithmAsInt;

  ma_resample_algorithm get algorithm =>
      ma_resample_algorithm.fromValue(algorithmAsInt);

  external ffi.Pointer<ma_resampling_backend_vtable> pBackendVTable;

  external ffi.Pointer<ffi.Void> pBackendUserData;

  external UnnamedStruct44 linear;
}

enum ma_dither_mode {
  ma_dither_mode_none(0),
  ma_dither_mode_rectangle(1),
  ma_dither_mode_triangle(2);

  final int value;
  const ma_dither_mode(this.value);

  static ma_dither_mode fromValue(int value) => switch (value) {
        0 => ma_dither_mode_none,
        1 => ma_dither_mode_rectangle,
        2 => ma_dither_mode_triangle,
        _ => throw ArgumentError('Unknown value for ma_dither_mode: $value'),
      };
}

enum ma_data_converter_execution_path {
  ma_data_converter_execution_path_passthrough(0),
  ma_data_converter_execution_path_format_only(1),
  ma_data_converter_execution_path_channels_only(2),
  ma_data_converter_execution_path_resample_only(3),
  ma_data_converter_execution_path_resample_first(4),
  ma_data_converter_execution_path_channels_first(5);

  final int value;
  const ma_data_converter_execution_path(this.value);

  static ma_data_converter_execution_path fromValue(int value) =>
      switch (value) {
        0 => ma_data_converter_execution_path_passthrough,
        1 => ma_data_converter_execution_path_format_only,
        2 => ma_data_converter_execution_path_channels_only,
        3 => ma_data_converter_execution_path_resample_only,
        4 => ma_data_converter_execution_path_resample_first,
        5 => ma_data_converter_execution_path_channels_first,
        _ => throw ArgumentError(
            'Unknown value for ma_data_converter_execution_path: $value'),
      };
}

/// Channel Conversion
enum ma_channel_conversion_path {
  ma_channel_conversion_path_unknown(0),
  ma_channel_conversion_path_passthrough(1),
  ma_channel_conversion_path_mono_out(2),
  ma_channel_conversion_path_mono_in(3),
  ma_channel_conversion_path_shuffle(4),
  ma_channel_conversion_path_weights(5);

  final int value;
  const ma_channel_conversion_path(this.value);

  static ma_channel_conversion_path fromValue(int value) => switch (value) {
        0 => ma_channel_conversion_path_unknown,
        1 => ma_channel_conversion_path_passthrough,
        2 => ma_channel_conversion_path_mono_out,
        3 => ma_channel_conversion_path_mono_in,
        4 => ma_channel_conversion_path_shuffle,
        5 => ma_channel_conversion_path_weights,
        _ => throw ArgumentError(
            'Unknown value for ma_channel_conversion_path: $value'),
      };
}

final class UnnamedUnion12 extends ffi.Union {
  external ffi.Pointer<ffi.Pointer<ffi.Float>> f32;

  external ffi.Pointer<ffi.Pointer<ma_int32>> s16;
}

final class ma_channel_converter extends ffi.Struct {
  @ffi.UnsignedInt()
  external int formatAsInt;

  ma_format get format => ma_format.fromValue(formatAsInt);

  @ma_uint32()
  external int channelsIn;

  @ma_uint32()
  external int channelsOut;

  @ffi.UnsignedInt()
  external int mixingModeAsInt;

  ma_channel_mix_mode get mixingMode =>
      ma_channel_mix_mode.fromValue(mixingModeAsInt);

  @ffi.UnsignedInt()
  external int conversionPathAsInt;

  ma_channel_conversion_path get conversionPath =>
      ma_channel_conversion_path.fromValue(conversionPathAsInt);

  external ffi.Pointer<ma_channel> pChannelMapIn;

  external ffi.Pointer<ma_channel> pChannelMapOut;

  external ffi.Pointer<ma_uint8> pShuffleTable;

  external UnnamedUnion12 weights;

  external ffi.Pointer<ffi.Void> _pHeap;

  @ma_bool32()
  external int _ownsHeap;
}

/// Resampling
final class ma_linear_resampler_config extends ffi.Struct {
  @ffi.UnsignedInt()
  external int formatAsInt;

  ma_format get format => ma_format.fromValue(formatAsInt);

  @ma_uint32()
  external int channels;

  @ma_uint32()
  external int sampleRateIn;

  @ma_uint32()
  external int sampleRateOut;

  @ma_uint32()
  external int lpfOrder;

  @ffi.Double()
  external double lpfNyquistFactor;
}

typedef ma_int16 = ffi.Short;
typedef Dartma_int16 = int;

final class UnnamedUnion14 extends ffi.Union {
  external ffi.Pointer<ffi.Float> f32;

  external ffi.Pointer<ma_int16> s16;
}

final class UnnamedUnion15 extends ffi.Union {
  external ffi.Pointer<ffi.Float> f32;

  external ffi.Pointer<ma_int16> s16;
}

/// Biquad Filtering
final class ma_biquad_coefficient extends ffi.Union {
  @ffi.Float()
  external double f32;

  @ma_int32()
  external int s32;
}

final class ma_lpf1 extends ffi.Struct {
  @ffi.UnsignedInt()
  external int formatAsInt;

  ma_format get format => ma_format.fromValue(formatAsInt);

  @ma_uint32()
  external int channels;

  external ma_biquad_coefficient a;

  external ffi.Pointer<ma_biquad_coefficient> pR1;

  external ffi.Pointer<ffi.Void> _pHeap;

  @ma_bool32()
  external int _ownsHeap;
}

final class ma_biquad extends ffi.Struct {
  @ffi.UnsignedInt()
  external int formatAsInt;

  ma_format get format => ma_format.fromValue(formatAsInt);

  @ma_uint32()
  external int channels;

  external ma_biquad_coefficient b0;

  external ma_biquad_coefficient b1;

  external ma_biquad_coefficient b2;

  external ma_biquad_coefficient a1;

  external ma_biquad_coefficient a2;

  external ffi.Pointer<ma_biquad_coefficient> pR1;

  external ffi.Pointer<ma_biquad_coefficient> pR2;

  external ffi.Pointer<ffi.Void> _pHeap;

  @ma_bool32()
  external int _ownsHeap;
}

final class ma_lpf2 extends ffi.Struct {
  external ma_biquad bq;
}

final class ma_lpf extends ffi.Struct {
  @ffi.UnsignedInt()
  external int formatAsInt;

  ma_format get format => ma_format.fromValue(formatAsInt);

  @ma_uint32()
  external int channels;

  @ma_uint32()
  external int sampleRate;

  @ma_uint32()
  external int lpf1Count;

  @ma_uint32()
  external int lpf2Count;

  external ffi.Pointer<ma_lpf1> pLPF1;

  external ffi.Pointer<ma_lpf2> pLPF2;

  external ffi.Pointer<ffi.Void> _pHeap;

  @ma_bool32()
  external int _ownsHeap;
}

final class ma_linear_resampler extends ffi.Struct {
  external ma_linear_resampler_config config;

  @ma_uint32()
  external int inAdvanceInt;

  @ma_uint32()
  external int inAdvanceFrac;

  @ma_uint32()
  external int inTimeInt;

  @ma_uint32()
  external int inTimeFrac;

  external UnnamedUnion14 x0;

  external UnnamedUnion15 x1;

  external ma_lpf lpf;

  external ffi.Pointer<ffi.Void> _pHeap;

  @ma_bool32()
  external int _ownsHeap;
}

final class UnnamedUnion13 extends ffi.Union {
  external ma_linear_resampler linear;
}

final class ma_resampler extends ffi.Struct {
  external ffi.Pointer<ma_resampling_backend> pBackend;

  external ffi.Pointer<ma_resampling_backend_vtable> pBackendVTable;

  external ffi.Pointer<ffi.Void> pBackendUserData;

  @ffi.UnsignedInt()
  external int formatAsInt;

  ma_format get format => ma_format.fromValue(formatAsInt);

  @ma_uint32()
  external int channels;

  @ma_uint32()
  external int sampleRateIn;

  @ma_uint32()
  external int sampleRateOut;

  external UnnamedUnion13 state;

  external ffi.Pointer<ffi.Void> _pHeap;

  @ma_bool32()
  external int _ownsHeap;
}

final class ma_data_converter extends ffi.Struct {
  @ffi.UnsignedInt()
  external int formatInAsInt;

  ma_format get formatIn => ma_format.fromValue(formatInAsInt);

  @ffi.UnsignedInt()
  external int formatOutAsInt;

  ma_format get formatOut => ma_format.fromValue(formatOutAsInt);

  @ma_uint32()
  external int channelsIn;

  @ma_uint32()
  external int channelsOut;

  @ma_uint32()
  external int sampleRateIn;

  @ma_uint32()
  external int sampleRateOut;

  @ffi.UnsignedInt()
  external int ditherModeAsInt;

  ma_dither_mode get ditherMode => ma_dither_mode.fromValue(ditherModeAsInt);

  @ffi.UnsignedInt()
  external int executionPathAsInt;

  ma_data_converter_execution_path get executionPath =>
      ma_data_converter_execution_path.fromValue(executionPathAsInt);

  external ma_channel_converter channelConverter;

  external ma_resampler resampler;

  @ma_bool8()
  external int hasPreFormatConversion;

  @ma_bool8()
  external int hasPostFormatConversion;

  @ma_bool8()
  external int hasChannelConverter;

  @ma_bool8()
  external int hasResampler;

  @ma_bool8()
  external int isPassthrough;

  @ma_bool8()
  external int _ownsHeap;

  external ffi.Pointer<ffi.Void> _pHeap;
}

final class UnnamedStruct45 extends ffi.Struct {
  external ffi.Pointer<ma_device_id> pID;

  external ma_device_id id;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Char> name;

  @ffi.UnsignedInt()
  external int shareModeAsInt;

  ma_share_mode get shareMode => ma_share_mode.fromValue(shareModeAsInt);

  @ffi.UnsignedInt()
  external int formatAsInt;

  ma_format get format => ma_format.fromValue(formatAsInt);

  @ma_uint32()
  external int channels;

  @ffi.Array.multi([254])
  external ffi.Array<ma_channel> channelMap;

  @ffi.UnsignedInt()
  external int internalFormatAsInt;

  ma_format get internalFormat => ma_format.fromValue(internalFormatAsInt);

  @ma_uint32()
  external int internalChannels;

  @ma_uint32()
  external int internalSampleRate;

  @ffi.Array.multi([254])
  external ffi.Array<ma_channel> internalChannelMap;

  @ma_uint32()
  external int internalPeriodSizeInFrames;

  @ma_uint32()
  external int internalPeriods;

  @ffi.UnsignedInt()
  external int channelMixModeAsInt;

  ma_channel_mix_mode get channelMixMode =>
      ma_channel_mix_mode.fromValue(channelMixModeAsInt);

  @ma_bool32()
  external int calculateLFEFromSpatialChannels;

  external ma_data_converter converter;

  external ffi.Pointer<ffi.Void> pIntermediaryBuffer;

  @ma_uint32()
  external int intermediaryBufferCap;

  @ma_uint32()
  external int intermediaryBufferLen;

  external ffi.Pointer<ffi.Void> pInputCache;

  @ma_uint64()
  external int inputCacheCap;

  @ma_uint64()
  external int inputCacheConsumed;

  @ma_uint64()
  external int inputCacheRemaining;
}

final class UnnamedStruct46 extends ffi.Struct {
  external ffi.Pointer<ma_device_id> pID;

  external ma_device_id id;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Char> name;

  @ffi.UnsignedInt()
  external int shareModeAsInt;

  ma_share_mode get shareMode => ma_share_mode.fromValue(shareModeAsInt);

  @ffi.UnsignedInt()
  external int formatAsInt;

  ma_format get format => ma_format.fromValue(formatAsInt);

  @ma_uint32()
  external int channels;

  @ffi.Array.multi([254])
  external ffi.Array<ma_channel> channelMap;

  @ffi.UnsignedInt()
  external int internalFormatAsInt;

  ma_format get internalFormat => ma_format.fromValue(internalFormatAsInt);

  @ma_uint32()
  external int internalChannels;

  @ma_uint32()
  external int internalSampleRate;

  @ffi.Array.multi([254])
  external ffi.Array<ma_channel> internalChannelMap;

  @ma_uint32()
  external int internalPeriodSizeInFrames;

  @ma_uint32()
  external int internalPeriods;

  @ffi.UnsignedInt()
  external int channelMixModeAsInt;

  ma_channel_mix_mode get channelMixMode =>
      ma_channel_mix_mode.fromValue(channelMixModeAsInt);

  @ma_bool32()
  external int calculateLFEFromSpatialChannels;

  external ma_data_converter converter;

  external ffi.Pointer<ffi.Void> pIntermediaryBuffer;

  @ma_uint32()
  external int intermediaryBufferCap;

  @ma_uint32()
  external int intermediaryBufferLen;
}

typedef ma_ptr = ffi.Pointer<ffi.Void>;

final class ma_IMMNotificationClient extends ffi.Struct {
  external ffi.Pointer<ffi.Void> lpVtbl;

  @ma_uint32()
  external int counter;

  external ffi.Pointer<ma_device> pDevice;
}

final class ma_atomic_bool32 extends ffi.Struct {
  @ma_bool32()
  external int value;
}

final class UnnamedStruct47 extends ffi.Struct {
  external ma_ptr pAudioClientPlayback;

  external ma_ptr pAudioClientCapture;

  external ma_ptr pRenderClient;

  external ma_ptr pCaptureClient;

  external ma_ptr pDeviceEnumerator;

  external ma_IMMNotificationClient notificationClient;

  external ma_handle hEventPlayback;

  external ma_handle hEventCapture;

  @ma_uint32()
  external int actualBufferSizeInFramesPlayback;

  @ma_uint32()
  external int actualBufferSizeInFramesCapture;

  @ma_uint32()
  external int originalPeriodSizeInFrames;

  @ma_uint32()
  external int originalPeriodSizeInMilliseconds;

  @ma_uint32()
  external int originalPeriods;

  @ffi.UnsignedInt()
  external int originalPerformanceProfileAsInt;

  ma_performance_profile get originalPerformanceProfile =>
      ma_performance_profile.fromValue(originalPerformanceProfileAsInt);

  @ma_uint32()
  external int periodSizeInFramesPlayback;

  @ma_uint32()
  external int periodSizeInFramesCapture;

  external ffi.Pointer<ffi.Void> pMappedBufferCapture;

  @ma_uint32()
  external int mappedBufferCaptureCap;

  @ma_uint32()
  external int mappedBufferCaptureLen;

  external ffi.Pointer<ffi.Void> pMappedBufferPlayback;

  @ma_uint32()
  external int mappedBufferPlaybackCap;

  @ma_uint32()
  external int mappedBufferPlaybackLen;

  external ma_atomic_bool32 isStartedCapture;

  external ma_atomic_bool32 isStartedPlayback;

  @ma_uint32()
  external int loopbackProcessID;

  @ma_bool8()
  external int loopbackProcessExclude;

  @ma_bool8()
  external int noAutoConvertSRC;

  @ma_bool8()
  external int noDefaultQualitySRC;

  @ma_bool8()
  external int noHardwareOffloading;

  @ma_bool8()
  external int allowCaptureAutoStreamRouting;

  @ma_bool8()
  external int allowPlaybackAutoStreamRouting;

  @ma_bool8()
  external int isDetachedPlayback;

  @ma_bool8()
  external int isDetachedCapture;

  @ffi.UnsignedInt()
  external int usageAsInt;

  ma_wasapi_usage get usage => ma_wasapi_usage.fromValue(usageAsInt);

  external ffi.Pointer<ffi.Void> hAvrtHandle;

  external ma_mutex rerouteLock;
}

final class UnnamedStruct48 extends ffi.Struct {
  external ma_ptr pPlayback;

  external ma_ptr pPlaybackPrimaryBuffer;

  external ma_ptr pPlaybackBuffer;

  external ma_ptr pCapture;

  external ma_ptr pCaptureBuffer;
}

final class UnnamedStruct49 extends ffi.Struct {
  external ma_handle hDevicePlayback;

  external ma_handle hDeviceCapture;

  external ma_handle hEventPlayback;

  external ma_handle hEventCapture;

  @ma_uint32()
  external int fragmentSizeInFrames;

  @ma_uint32()
  external int iNextHeaderPlayback;

  @ma_uint32()
  external int iNextHeaderCapture;

  @ma_uint32()
  external int headerFramesConsumedPlayback;

  @ma_uint32()
  external int headerFramesConsumedCapture;

  external ffi.Pointer<ma_uint8> pWAVEHDRPlayback;

  external ffi.Pointer<ma_uint8> pWAVEHDRCapture;

  external ffi.Pointer<ma_uint8> pIntermediaryBufferPlayback;

  external ffi.Pointer<ma_uint8> pIntermediaryBufferCapture;

  external ffi.Pointer<ma_uint8> _pHeapData;
}

final class UnnamedStruct50 extends ffi.Struct {
  external ma_ptr pClient;

  external ffi.Pointer<ma_ptr> ppPortsPlayback;

  external ffi.Pointer<ma_ptr> ppPortsCapture;

  external ffi.Pointer<ffi.Float> pIntermediaryBufferPlayback;

  external ffi.Pointer<ffi.Float> pIntermediaryBufferCapture;
}

final class ma_timer extends ffi.Union {
  @ma_int64()
  external int counter;

  @ffi.Double()
  external double counterD;
}

final class UnnamedStruct51 extends ffi.Struct {
  external ma_thread deviceThread;

  external ma_event operationEvent;

  external ma_event operationCompletionEvent;

  external ma_semaphore operationSemaphore;

  @ma_uint32()
  external int operation;

  @ffi.Int()
  external int operationResultAsInt;

  ma_result get operationResult => ma_result.fromValue(operationResultAsInt);

  external ma_timer timer;

  @ffi.Double()
  external double priorRunTime;

  @ma_uint32()
  external int currentPeriodFramesRemainingPlayback;

  @ma_uint32()
  external int currentPeriodFramesRemainingCapture;

  @ma_uint64()
  external int lastProcessedFramePlayback;

  @ma_uint64()
  external int lastProcessedFrameCapture;

  external ma_atomic_bool32 isStarted;
}

final class UnnamedUnion16 extends ffi.Union {
  external UnnamedStruct47 wasapi;

  external UnnamedStruct48 dsound;

  external UnnamedStruct49 winmm;

  external UnnamedStruct50 jack;

  external UnnamedStruct51 null_device;
}

final class ma_device extends ffi.Struct {
  external ffi.Pointer<ma_context> pContext;

  @ffi.UnsignedInt()
  external int typeAsInt;

  ma_device_type get type => ma_device_type.fromValue(typeAsInt);

  @ma_uint32()
  external int sampleRate;

  external ma_atomic_device_state state;

  external ma_device_data_proc onData;

  external ma_device_notification_proc onNotification;

  external ma_stop_proc onStop;

  external ffi.Pointer<ffi.Void> pUserData;

  external ma_mutex startStopLock;

  external ma_event wakeupEvent;

  external ma_event startEvent;

  external ma_event stopEvent;

  external ma_thread thread;

  @ffi.Int()
  external int workResultAsInt;

  ma_result get workResult => ma_result.fromValue(workResultAsInt);

  @ma_bool8()
  external int isOwnerOfContext;

  @ma_bool8()
  external int noPreSilencedOutputBuffer;

  @ma_bool8()
  external int noClip;

  @ma_bool8()
  external int noDisableDenormals;

  @ma_bool8()
  external int noFixedSizedCallback;

  external ma_atomic_float masterVolumeFactor;

  external ma_duplex_rb duplexRB;

  external UnnamedStruct43 resampling;

  external UnnamedStruct45 playback;

  external UnnamedStruct46 capture;

  external UnnamedUnion16 unnamed;
}

enum ma_handedness {
  ma_handedness_right(0),
  ma_handedness_left(1);

  final int value;
  const ma_handedness(this.value);

  static ma_handedness fromValue(int value) => switch (value) {
        0 => ma_handedness_right,
        1 => ma_handedness_left,
        _ => throw ArgumentError('Unknown value for ma_handedness: $value'),
      };
}

final class ma_vec3f extends ffi.Struct {
  @ffi.Float()
  external double x;

  @ffi.Float()
  external double y;

  @ffi.Float()
  external double z;
}

final class ma_spatializer_listener_config extends ffi.Struct {
  @ma_uint32()
  external int channelsOut;

  external ffi.Pointer<ma_channel> pChannelMapOut;

  @ffi.UnsignedInt()
  external int handednessAsInt;

  ma_handedness get handedness => ma_handedness.fromValue(handednessAsInt);

  @ffi.Float()
  external double coneInnerAngleInRadians;

  @ffi.Float()
  external double coneOuterAngleInRadians;

  @ffi.Float()
  external double coneOuterGain;

  @ffi.Float()
  external double speedOfSound;

  external ma_vec3f worldUp;
}

final class ma_atomic_vec3f extends ffi.Struct {
  external ma_vec3f v;

  @ma_spinlock()
  external int lock;
}

final class ma_spatializer_listener extends ffi.Struct {
  external ma_spatializer_listener_config config;

  external ma_atomic_vec3f position;

  external ma_atomic_vec3f direction;

  external ma_atomic_vec3f velocity;

  @ma_bool32()
  external int isEnabled;

  @ma_bool32()
  external int _ownsHeap;

  external ffi.Pointer<ffi.Void> _pHeap;
}

enum ma_mono_expansion_mode {
  ma_mono_expansion_mode_duplicate(0),
  ma_mono_expansion_mode_average(1),
  ma_mono_expansion_mode_stereo_only(2);

  static const ma_mono_expansion_mode_default =
      ma_mono_expansion_mode_duplicate;

  final int value;
  const ma_mono_expansion_mode(this.value);

  static ma_mono_expansion_mode fromValue(int value) => switch (value) {
        0 => ma_mono_expansion_mode_duplicate,
        1 => ma_mono_expansion_mode_average,
        2 => ma_mono_expansion_mode_stereo_only,
        _ => throw ArgumentError(
            'Unknown value for ma_mono_expansion_mode: $value'),
      };

  @override
  String toString() {
    if (this == ma_mono_expansion_mode_duplicate)
      return "ma_mono_expansion_mode.ma_mono_expansion_mode_duplicate, ma_mono_expansion_mode.ma_mono_expansion_mode_default";
    return super.toString();
  }
}

final class ma_fader_config extends ffi.Struct {
  @ffi.UnsignedInt()
  external int formatAsInt;

  ma_format get format => ma_format.fromValue(formatAsInt);

  @ma_uint32()
  external int channels;

  @ma_uint32()
  external int sampleRate;
}

final class ma_fader extends ffi.Struct {
  external ma_fader_config config;

  @ffi.Float()
  external double volumeBeg;

  @ffi.Float()
  external double volumeEnd;

  @ma_uint64()
  external int lengthInFrames;

  @ma_int64()
  external int cursorInFrames;
}

enum ma_attenuation_model {
  ma_attenuation_model_none(0),
  ma_attenuation_model_inverse(1),
  ma_attenuation_model_linear(2),
  ma_attenuation_model_exponential(3);

  final int value;
  const ma_attenuation_model(this.value);

  static ma_attenuation_model fromValue(int value) => switch (value) {
        0 => ma_attenuation_model_none,
        1 => ma_attenuation_model_inverse,
        2 => ma_attenuation_model_linear,
        3 => ma_attenuation_model_exponential,
        _ =>
          throw ArgumentError('Unknown value for ma_attenuation_model: $value'),
      };
}

enum ma_positioning {
  ma_positioning_absolute(0),
  ma_positioning_relative(1);

  final int value;
  const ma_positioning(this.value);

  static ma_positioning fromValue(int value) => switch (value) {
        0 => ma_positioning_absolute,
        1 => ma_positioning_relative,
        _ => throw ArgumentError('Unknown value for ma_positioning: $value'),
      };
}

final class ma_gainer_config extends ffi.Struct {
  @ma_uint32()
  external int channels;

  @ma_uint32()
  external int smoothTimeInFrames;
}

final class ma_gainer extends ffi.Struct {
  external ma_gainer_config config;

  @ma_uint32()
  external int t;

  @ffi.Float()
  external double masterVolume;

  external ffi.Pointer<ffi.Float> pOldGains;

  external ffi.Pointer<ffi.Float> pNewGains;

  external ffi.Pointer<ffi.Void> _pHeap;

  @ma_bool32()
  external int _ownsHeap;
}

final class ma_spatializer extends ffi.Struct {
  @ma_uint32()
  external int channelsIn;

  @ma_uint32()
  external int channelsOut;

  external ffi.Pointer<ma_channel> pChannelMapIn;

  @ffi.UnsignedInt()
  external int attenuationModelAsInt;

  ma_attenuation_model get attenuationModel =>
      ma_attenuation_model.fromValue(attenuationModelAsInt);

  @ffi.UnsignedInt()
  external int positioningAsInt;

  ma_positioning get positioning => ma_positioning.fromValue(positioningAsInt);

  @ffi.UnsignedInt()
  external int handednessAsInt;

  ma_handedness get handedness => ma_handedness.fromValue(handednessAsInt);

  @ffi.Float()
  external double minGain;

  @ffi.Float()
  external double maxGain;

  @ffi.Float()
  external double minDistance;

  @ffi.Float()
  external double maxDistance;

  @ffi.Float()
  external double rolloff;

  @ffi.Float()
  external double coneInnerAngleInRadians;

  @ffi.Float()
  external double coneOuterAngleInRadians;

  @ffi.Float()
  external double coneOuterGain;

  @ffi.Float()
  external double dopplerFactor;

  @ffi.Float()
  external double directionalAttenuationFactor;

  @ma_uint32()
  external int gainSmoothTimeInFrames;

  external ma_atomic_vec3f position;

  external ma_atomic_vec3f direction;

  external ma_atomic_vec3f velocity;

  @ffi.Float()
  external double dopplerPitch;

  @ffi.Float()
  external double minSpatializationChannelGain;

  external ma_gainer gainer;

  external ffi.Pointer<ffi.Float> pNewChannelGainsOut;

  external ffi.Pointer<ffi.Void> _pHeap;

  @ma_bool32()
  external int _ownsHeap;
}

enum ma_pan_mode {
  ma_pan_mode_balance(0),
  ma_pan_mode_pan(1);

  final int value;
  const ma_pan_mode(this.value);

  static ma_pan_mode fromValue(int value) => switch (value) {
        0 => ma_pan_mode_balance,
        1 => ma_pan_mode_pan,
        _ => throw ArgumentError('Unknown value for ma_pan_mode: $value'),
      };
}

final class ma_panner extends ffi.Struct {
  @ffi.UnsignedInt()
  external int formatAsInt;

  ma_format get format => ma_format.fromValue(formatAsInt);

  @ma_uint32()
  external int channels;

  @ffi.UnsignedInt()
  external int modeAsInt;

  ma_pan_mode get mode => ma_pan_mode.fromValue(modeAsInt);

  @ffi.Float()
  external double pan;
}

final class ma_atomic_uint64 extends ffi.Struct {
  @ma_uint64()
  external int value;
}

final class UnnamedStruct52 extends ffi.Struct {
  external ma_atomic_float volumeBeg;

  external ma_atomic_float volumeEnd;

  external ma_atomic_uint64 fadeLengthInFrames;

  external ma_atomic_uint64 absoluteGlobalTimeInFrames;
}

final class ma_engine_node extends ffi.Struct {
  external ma_node_base baseNode;

  external ffi.Pointer<ma_engine> pEngine;

  @ma_uint32()
  external int sampleRate;

  @ma_uint32()
  external int volumeSmoothTimeInPCMFrames;

  @ffi.UnsignedInt()
  external int monoExpansionModeAsInt;

  ma_mono_expansion_mode get monoExpansionMode =>
      ma_mono_expansion_mode.fromValue(monoExpansionModeAsInt);

  external ma_fader fader;

  external ma_linear_resampler resampler;

  external ma_spatializer spatializer;

  external ma_panner panner;

  external ma_gainer volumeGainer;

  external ma_atomic_float volume;

  @ffi.Float()
  external double pitch;

  @ffi.Float()
  external double oldPitch;

  @ffi.Float()
  external double oldDopplerPitch;

  @ma_bool32()
  external int isPitchDisabled;

  @ma_bool32()
  external int isSpatializationDisabled;

  @ma_uint32()
  external int pinnedListenerIndex;

  external UnnamedStruct52 fadeSettings;

  @ma_bool8()
  external int _ownsHeap;

  external ffi.Pointer<ffi.Void> _pHeap;
}

typedef ma_sound_end_procFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> pUserData, ffi.Pointer<ma_sound> pSound);
typedef Dartma_sound_end_procFunction = void Function(
    ffi.Pointer<ffi.Void> pUserData, ffi.Pointer<ma_sound> pSound);
typedef ma_sound_end_proc
    = ffi.Pointer<ffi.NativeFunction<ma_sound_end_procFunction>>;
typedef ma_decoder_read_procFunction = ffi.Int Function(
    ffi.Pointer<ma_decoder> pDecoder,
    ffi.Pointer<ffi.Void> pBufferOut,
    ffi.Size bytesToRead,
    ffi.Pointer<ffi.Size> pBytesRead);
typedef Dartma_decoder_read_procFunction = ma_result Function(
    ffi.Pointer<ma_decoder> pDecoder,
    ffi.Pointer<ffi.Void> pBufferOut,
    int bytesToRead,
    ffi.Pointer<ffi.Size> pBytesRead);
typedef ma_decoder_read_proc
    = ffi.Pointer<ffi.NativeFunction<ma_decoder_read_procFunction>>;
typedef ma_decoder_seek_procFunction = ffi.Int Function(
    ffi.Pointer<ma_decoder> pDecoder,
    ma_int64 byteOffset,
    ffi.UnsignedInt origin);
typedef Dartma_decoder_seek_procFunction = ma_result Function(
    ffi.Pointer<ma_decoder> pDecoder,
    Dartma_int64 byteOffset,
    ma_seek_origin origin);
typedef ma_decoder_seek_proc
    = ffi.Pointer<ffi.NativeFunction<ma_decoder_seek_procFunction>>;
typedef ma_decoder_tell_procFunction = ffi.Int Function(
    ffi.Pointer<ma_decoder> pDecoder, ffi.Pointer<ma_int64> pCursor);
typedef Dartma_decoder_tell_procFunction = ma_result Function(
    ffi.Pointer<ma_decoder> pDecoder, ffi.Pointer<ma_int64> pCursor);
typedef ma_decoder_tell_proc
    = ffi.Pointer<ffi.NativeFunction<ma_decoder_tell_procFunction>>;

final class UnnamedStruct53 extends ffi.Struct {
  external ffi.Pointer<ma_vfs> pVFS;

  external ma_vfs_file file;
}

final class UnnamedStruct54 extends ffi.Struct {
  external ffi.Pointer<ma_uint8> pData;

  @ffi.Size()
  external int dataSize;

  @ffi.Size()
  external int currentReadPos;
}

final class UnnamedUnion19 extends ffi.Union {
  external UnnamedStruct53 vfs;

  external UnnamedStruct54 memory;
}

final class ma_decoder extends ffi.Struct {
  external ma_data_source_base ds;

  external ffi.Pointer<ma_data_source> pBackend;

  external ffi.Pointer<ma_decoding_backend_vtable> pBackendVTable;

  external ffi.Pointer<ffi.Void> pBackendUserData;

  external ma_decoder_read_proc onRead;

  external ma_decoder_seek_proc onSeek;

  external ma_decoder_tell_proc onTell;

  external ffi.Pointer<ffi.Void> pUserData;

  @ma_uint64()
  external int readPointerInPCMFrames;

  @ffi.UnsignedInt()
  external int outputFormatAsInt;

  ma_format get outputFormat => ma_format.fromValue(outputFormatAsInt);

  @ma_uint32()
  external int outputChannels;

  @ma_uint32()
  external int outputSampleRate;

  external ma_data_converter converter;

  external ffi.Pointer<ffi.Void> pInputCache;

  @ma_uint64()
  external int inputCacheCap;

  @ma_uint64()
  external int inputCacheConsumed;

  @ma_uint64()
  external int inputCacheRemaining;

  external ma_allocation_callbacks allocationCallbacks;

  external UnnamedUnion19 data;
}

final class ma_audio_buffer_ref extends ffi.Struct {
  external ma_data_source_base ds;

  @ffi.UnsignedInt()
  external int formatAsInt;

  ma_format get format => ma_format.fromValue(formatAsInt);

  @ma_uint32()
  external int channels;

  @ma_uint32()
  external int sampleRate;

  @ma_uint64()
  external int cursor;

  @ma_uint64()
  external int sizeInFrames;

  external ffi.Pointer<ffi.Void> pData;
}

final class ma_audio_buffer extends ffi.Struct {
  external ma_audio_buffer_ref ref;

  external ma_allocation_callbacks allocationCallbacks;

  @ma_bool32()
  external int ownsData;

  @ffi.Array.multi([1])
  external ffi.Array<ma_uint8> _pExtraData;
}

final class ma_paged_audio_buffer extends ffi.Struct {
  external ma_data_source_base ds;

  external ffi.Pointer<ma_paged_audio_buffer_data> pData;

  external ffi.Pointer<ma_paged_audio_buffer_page> pCurrent;

  @ma_uint64()
  external int relativeCursor;

  @ma_uint64()
  external int absoluteCursor;
}

final class UnnamedUnion18 extends ffi.Union {
  external ma_decoder decoder;

  external ma_audio_buffer buffer;

  external ma_paged_audio_buffer pagedBuffer;
}

final class ma_resource_manager_data_buffer extends ffi.Struct {
  external ma_data_source_base ds;

  external ffi.Pointer<ma_resource_manager> pResourceManager;

  external ffi.Pointer<ma_resource_manager_data_buffer_node> pNode;

  @ma_uint32()
  external int flags;

  @ma_uint32()
  external int executionCounter;

  @ma_uint32()
  external int executionPointer;

  @ma_uint64()
  external int seekTargetInPCMFrames;

  @ma_bool32()
  external int seekToCursorOnNextRead;

  @ffi.Int()
  external int resultAsInt;

  ma_result get result => ma_result.fromValue(resultAsInt);

  @ma_bool32()
  external int isLooping;

  external ma_atomic_bool32 isConnectorInitialized;

  external UnnamedUnion18 connector;
}

final class ma_resource_manager_data_stream extends ffi.Struct {
  external ma_data_source_base ds;

  external ffi.Pointer<ma_resource_manager> pResourceManager;

  @ma_uint32()
  external int flags;

  external ma_decoder decoder;

  @ma_bool32()
  external int isDecoderInitialized;

  @ma_uint64()
  external int totalLengthInPCMFrames;

  @ma_uint32()
  external int relativeCursor;

  @ma_uint64()
  external int absoluteCursor;

  @ma_uint32()
  external int currentPageIndex;

  @ma_uint32()
  external int executionCounter;

  @ma_uint32()
  external int executionPointer;

  @ma_bool32()
  external int isLooping;

  external ffi.Pointer<ffi.Void> pPageData;

  @ffi.Array.multi([2])
  external ffi.Array<ma_uint32> pageFrameCount;

  @ffi.Int()
  external int resultAsInt;

  ma_result get result => ma_result.fromValue(resultAsInt);

  @ma_bool32()
  external int isDecoderAtEnd;

  @ffi.Array.multi([2])
  external ffi.Array<ma_bool32> isPageValid;

  @ma_bool32()
  external int seekCounter;
}

final class UnnamedUnion17 extends ffi.Union {
  external ma_resource_manager_data_buffer buffer;

  external ma_resource_manager_data_stream stream;
}

final class ma_resource_manager_data_source extends ffi.Struct {
  external UnnamedUnion17 backend;

  @ma_uint32()
  external int flags;

  @ma_uint32()
  external int executionCounter;

  @ma_uint32()
  external int executionPointer;
}

final class ma_sound extends ffi.Struct {
  external ma_engine_node engineNode;

  external ffi.Pointer<ma_data_source> pDataSource;

  @ma_uint64()
  external int seekTarget;

  @ma_bool32()
  external int atEnd;

  external ma_sound_end_proc endCallback;

  external ffi.Pointer<ffi.Void> pEndCallbackUserData;

  @ma_bool8()
  external int ownsDataSource;

  external ffi.Pointer<ma_resource_manager_data_source>
      pResourceManagerDataSource;
}

final class ma_sound_inlined extends ffi.Struct {
  external ma_sound sound;

  external ffi.Pointer<ma_sound_inlined> pNext;

  external ffi.Pointer<ma_sound_inlined> pPrev;
}

typedef ma_engine_process_procFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> pUserData,
    ffi.Pointer<ffi.Float> pFramesOut,
    ma_uint64 frameCount);
typedef Dartma_engine_process_procFunction = void Function(
    ffi.Pointer<ffi.Void> pUserData,
    ffi.Pointer<ffi.Float> pFramesOut,
    Dartma_uint64 frameCount);
typedef ma_engine_process_proc
    = ffi.Pointer<ffi.NativeFunction<ma_engine_process_procFunction>>;

final class ma_engine extends ffi.Struct {
  external ma_node_graph nodeGraph;

  external ffi.Pointer<ma_resource_manager> pResourceManager;

  external ffi.Pointer<ma_device> pDevice;

  external ffi.Pointer<ma_log> pLog;

  @ma_uint32()
  external int sampleRate;

  @ma_uint32()
  external int listenerCount;

  @ffi.Array.multi([4])
  external ffi.Array<ma_spatializer_listener> listeners;

  external ma_allocation_callbacks allocationCallbacks;

  @ma_bool8()
  external int ownsResourceManager;

  @ma_bool8()
  external int ownsDevice;

  @ma_spinlock()
  external int inlinedSoundLock;

  external ffi.Pointer<ma_sound_inlined> pInlinedSoundHead;

  @ma_uint32()
  external int inlinedSoundCount;

  @ma_uint32()
  external int gainSmoothTimeInFrames;

  @ma_uint32()
  external int defaultVolumeSmoothTimeInPCMFrames;

  @ffi.UnsignedInt()
  external int monoExpansionModeAsInt;

  ma_mono_expansion_mode get monoExpansionMode =>
      ma_mono_expansion_mode.fromValue(monoExpansionModeAsInt);

  external ma_engine_process_proc onProcess;

  external ffi.Pointer<ffi.Void> pProcessUserData;
}

final class Sound extends ffi.Struct {
  @ffi.Bool()
  external bool is_raw_data;

  external ffi.Pointer<ma_engine> engine;

  external ma_decoder decoder;

  external ma_sound sound;

  external ma_audio_buffer buffer;

  @ffi.Bool()
  external bool is_looped;

  @ffi.Size()
  external int loop_delay_ms;

  external SilenceDataSource loop_delay_ds;
}

final class Engine extends ffi.Opaque {}

final class CircularBuffer extends ffi.Struct {
  external ffi.Pointer<ffi.Float> buffer;

  @ffi.Size()
  external int capacity;

  @ffi.Size()
  external int write_pos;

  @ffi.Size()
  external int read_pos;
}

enum ma_encoding_format {
  ma_encoding_format_unknown(0),
  ma_encoding_format_wav(1),
  ma_encoding_format_flac(2),
  ma_encoding_format_mp3(3),
  ma_encoding_format_vorbis(4);

  final int value;
  const ma_encoding_format(this.value);

  static ma_encoding_format fromValue(int value) => switch (value) {
        0 => ma_encoding_format_unknown,
        1 => ma_encoding_format_wav,
        2 => ma_encoding_format_flac,
        3 => ma_encoding_format_mp3,
        4 => ma_encoding_format_vorbis,
        _ =>
          throw ArgumentError('Unknown value for ma_encoding_format: $value'),
      };
}

final class ma_encoder_config extends ffi.Struct {
  @ffi.UnsignedInt()
  external int encodingFormatAsInt;

  ma_encoding_format get encodingFormat =>
      ma_encoding_format.fromValue(encodingFormatAsInt);

  @ffi.UnsignedInt()
  external int formatAsInt;

  ma_format get format => ma_format.fromValue(formatAsInt);

  @ma_uint32()
  external int channels;

  @ma_uint32()
  external int sampleRate;

  external ma_allocation_callbacks allocationCallbacks;
}

typedef ma_encoder_write_procFunction = ffi.Int Function(
    ffi.Pointer<ma_encoder> pEncoder,
    ffi.Pointer<ffi.Void> pBufferIn,
    ffi.Size bytesToWrite,
    ffi.Pointer<ffi.Size> pBytesWritten);
typedef Dartma_encoder_write_procFunction = ma_result Function(
    ffi.Pointer<ma_encoder> pEncoder,
    ffi.Pointer<ffi.Void> pBufferIn,
    int bytesToWrite,
    ffi.Pointer<ffi.Size> pBytesWritten);
typedef ma_encoder_write_proc
    = ffi.Pointer<ffi.NativeFunction<ma_encoder_write_procFunction>>;
typedef ma_encoder_seek_procFunction = ffi.Int Function(
    ffi.Pointer<ma_encoder> pEncoder, ma_int64 offset, ffi.UnsignedInt origin);
typedef Dartma_encoder_seek_procFunction = ma_result Function(
    ffi.Pointer<ma_encoder> pEncoder,
    Dartma_int64 offset,
    ma_seek_origin origin);
typedef ma_encoder_seek_proc
    = ffi.Pointer<ffi.NativeFunction<ma_encoder_seek_procFunction>>;
typedef ma_encoder_init_procFunction = ffi.Int Function(
    ffi.Pointer<ma_encoder> pEncoder);
typedef Dartma_encoder_init_procFunction = ma_result Function(
    ffi.Pointer<ma_encoder> pEncoder);
typedef ma_encoder_init_proc
    = ffi.Pointer<ffi.NativeFunction<ma_encoder_init_procFunction>>;
typedef ma_encoder_uninit_procFunction = ffi.Void Function(
    ffi.Pointer<ma_encoder> pEncoder);
typedef Dartma_encoder_uninit_procFunction = void Function(
    ffi.Pointer<ma_encoder> pEncoder);
typedef ma_encoder_uninit_proc
    = ffi.Pointer<ffi.NativeFunction<ma_encoder_uninit_procFunction>>;
typedef ma_encoder_write_pcm_frames_procFunction = ffi.Int Function(
    ffi.Pointer<ma_encoder> pEncoder,
    ffi.Pointer<ffi.Void> pFramesIn,
    ma_uint64 frameCount,
    ffi.Pointer<ma_uint64> pFramesWritten);
typedef Dartma_encoder_write_pcm_frames_procFunction = ma_result Function(
    ffi.Pointer<ma_encoder> pEncoder,
    ffi.Pointer<ffi.Void> pFramesIn,
    Dartma_uint64 frameCount,
    ffi.Pointer<ma_uint64> pFramesWritten);
typedef ma_encoder_write_pcm_frames_proc
    = ffi.Pointer<ffi.NativeFunction<ma_encoder_write_pcm_frames_procFunction>>;

final class UnnamedStruct55 extends ffi.Struct {
  external ffi.Pointer<ma_vfs> pVFS;

  external ma_vfs_file file;
}

final class UnnamedUnion20 extends ffi.Union {
  external UnnamedStruct55 vfs;
}

final class ma_encoder extends ffi.Struct {
  external ma_encoder_config config;

  external ma_encoder_write_proc onWrite;

  external ma_encoder_seek_proc onSeek;

  external ma_encoder_init_proc onInit;

  external ma_encoder_uninit_proc onUninit;

  external ma_encoder_write_pcm_frames_proc onWritePCMFrames;

  external ffi.Pointer<ffi.Void> pUserData;

  external ffi.Pointer<ffi.Void> pInternalEncoder;

  external UnnamedUnion20 data;
}

final class Recorder extends ffi.Struct {
  external ma_encoder encoder;

  external ma_encoder_config encoder_config;

  external ma_device device;

  external ma_device_config device_config;

  external ffi.Pointer<ffi.Char> filename;

  @ffi.Bool()
  external bool is_recording;

  @ffi.Bool()
  external bool is_file_recording;

  external CircularBuffer circular_buffer;

  @ffi.Int()
  external int sample_rate;

  @ffi.Int()
  external int channels;

  @ffi.UnsignedInt()
  external int formatAsInt;

  ma_format get format => ma_format.fromValue(formatAsInt);

  external ffi.Pointer<ffi.Uint8> encode_buffer;

  @ffi.Size()
  external int encode_buffer_size;

  @ffi.Size()
  external int encode_buffer_used;

  external ffi.Pointer<ffi.Void> user_data;
}

enum RecorderResult {
  RECORDER_OK(0),
  RECORDER_ERROR_UNKNOWN(1),
  RECORDER_ERROR_OUT_OF_MEMORY(2),
  RECORDER_ERROR_INVALID_ARGUMENT(3),
  RECORDER_ERROR_ALREADY_RECORDING(4),
  RECORDER_ERROR_NOT_RECORDING(5),
  RECORDER_ERROR_INVALID_FORMAT(6),
  RECORDER_ERROR_INVALID_CHANNELS(7);

  final int value;
  const RecorderResult(this.value);

  static RecorderResult fromValue(int value) => switch (value) {
        0 => RECORDER_OK,
        1 => RECORDER_ERROR_UNKNOWN,
        2 => RECORDER_ERROR_OUT_OF_MEMORY,
        3 => RECORDER_ERROR_INVALID_ARGUMENT,
        4 => RECORDER_ERROR_ALREADY_RECORDING,
        5 => RECORDER_ERROR_NOT_RECORDING,
        6 => RECORDER_ERROR_INVALID_FORMAT,
        7 => RECORDER_ERROR_INVALID_CHANNELS,
        _ => throw ArgumentError('Unknown value for RecorderResult: $value'),
      };
}

enum GeneratorResult {
  GENERATOR_OK(0),
  GENERATOR_ERROR(1);

  final int value;
  const GeneratorResult(this.value);

  static GeneratorResult fromValue(int value) => switch (value) {
        0 => GENERATOR_OK,
        1 => GENERATOR_ERROR,
        _ => throw ArgumentError('Unknown value for GeneratorResult: $value'),
      };
}

enum GeneratorType {
  GENERATOR_TYPE_WAVEFORM(0),
  GENERATOR_TYPE_PULSEWAVE(1),
  GENERATOR_TYPE_NOISE(2);

  final int value;
  const GeneratorType(this.value);

  static GeneratorType fromValue(int value) => switch (value) {
        0 => GENERATOR_TYPE_WAVEFORM,
        1 => GENERATOR_TYPE_PULSEWAVE,
        2 => GENERATOR_TYPE_NOISE,
        _ => throw ArgumentError('Unknown value for GeneratorType: $value'),
      };
}

final class Generator extends ffi.Struct {
  external CircularBuffer circular_buffer;

  @ffi.Int()
  external int sample_rate;

  @ffi.Int()
  external int channels;

  @ffi.UnsignedInt()
  external int typeAsInt;

  GeneratorType get type => GeneratorType.fromValue(typeAsInt);
}

enum ma_waveform_type {
  ma_waveform_type_sine(0),
  ma_waveform_type_square(1),
  ma_waveform_type_triangle(2),
  ma_waveform_type_sawtooth(3);

  final int value;
  const ma_waveform_type(this.value);

  static ma_waveform_type fromValue(int value) => switch (value) {
        0 => ma_waveform_type_sine,
        1 => ma_waveform_type_square,
        2 => ma_waveform_type_triangle,
        3 => ma_waveform_type_sawtooth,
        _ => throw ArgumentError('Unknown value for ma_waveform_type: $value'),
      };
}

enum ma_noise_type {
  ma_noise_type_white(0),
  ma_noise_type_pink(1),
  ma_noise_type_brownian(2);

  final int value;
  const ma_noise_type(this.value);

  static ma_noise_type fromValue(int value) => switch (value) {
        0 => ma_noise_type_white,
        1 => ma_noise_type_pink,
        2 => ma_noise_type_brownian,
        _ => throw ArgumentError('Unknown value for ma_noise_type: $value'),
      };
}
